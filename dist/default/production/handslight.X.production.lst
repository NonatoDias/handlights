

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 10 12:27:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4550 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	idataCOMRAM
    82  00710C                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _color_pages_
    86  00710C  06                 	db	6
    87  00710D  00                 	db	0
    88  00710E  01                 	db	1
    89  00710F  02                 	db	2
    90  007110  03                 	db	3
    91  007111  04                 	db	4
    92  007112  05                 	db	5
    93  007113  00                 	db	0
    94                           
    95                           ;initializer for __last_z
    96  007114  FF                 	db	255
    97                           
    98                           ;initializer for __last_x
    99  007115  FF                 	db	255
   100  0000                     _TXREG	set	4013
   101  0000                     _RCREG	set	4014
   102  0000                     _SPBRG	set	4015
   103  0000                     _LATE	set	3981
   104  0000                     _TRISD	set	3989
   105  0000                     _LATD	set	3980
   106  0000                     _TRISB	set	3987
   107  0000                     _LATB	set	3978
   108  0000                     _T0CON	set	4053
   109  0000                     _TRISA	set	3986
   110  0000                     _LATA	set	3977
   111  0000                     _CMCON	set	4020
   112  0000                     _ADCON1	set	4033
   113  0000                     _RCON	set	4048
   114  0000                     _T2CONbits	set	4042
   115  0000                     _TMR2	set	4044
   116  0000                     _CCP1CON	set	4029
   117  0000                     _T2CON	set	4042
   118  0000                     _CCPR1L	set	4030
   119  0000                     _TRISCbits	set	3988
   120  0000                     _PR2	set	4043
   121  0000                     _LATAbits	set	3977
   122  0000                     _TRMT	set	32097
   123  0000                     _RCIF	set	31989
   124  0000                     _TRISC6	set	31910
   125  0000                     _TRISC7	set	31911
   126  0000                     _TXEN	set	32101
   127  0000                     _CREN	set	32092
   128  0000                     _SPEN	set	32095
   129  0000                     _SYNC	set	32100
   130  0000                     _BRG16	set	32195
   131  0000                     _BRGH	set	32098
   132  0000                     _TRISC2	set	31906
   133                           
   134                           ; #config settings
   135  0000                     
   136                           	psect	cinit
   137  00721C                     __pcinit:
   138                           	opt stack 0
   139  00721C                     start_initialization:
   140                           	opt stack 0
   141  00721C                     __initialization:
   142                           	opt stack 0
   143                           
   144                           ; Initialize objects allocated to COMRAM (10 bytes)
   145                           ; load TBLPTR registers with __pidataCOMRAM
   146  00721C  0E0C               	movlw	low __pidataCOMRAM
   147  00721E  6EF6               	movwf	tblptrl,c
   148  007220  0E71               	movlw	high __pidataCOMRAM
   149  007222  6EF7               	movwf	tblptrh,c
   150  007224  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   151  007226  6EF8               	movwf	tblptru,c
   152  007228  EE00  F04C         	lfsr	0,__pdataCOMRAM
   153  00722C  EE10 F00A          	lfsr	1,10
   154  007230                     copy_data0:
   155  007230  0009               	tblrd		*+
   156  007232  CFF5 FFEE          	movff	tablat,postinc0
   157  007236  50E5               	movf	postdec1,w,c
   158  007238  50E1               	movf	fsr1l,w,c
   159  00723A  E1FA               	bnz	copy_data0
   160                           
   161                           ; Clear objects allocated to COMRAM (7 bytes)
   162  00723C  EE00  F056         	lfsr	0,__pbssCOMRAM
   163  007240  0E07               	movlw	7
   164  007242                     clear_0:
   165  007242  6AEE               	clrf	postinc0,c
   166  007244  06E8               	decf	wreg,f,c
   167  007246  E1FD               	bnz	clear_0
   168  007248                     end_of_initialization:
   169                           	opt stack 0
   170  007248                     __end_of__initialization:
   171                           	opt stack 0
   172  007248  0E00               	movlw	low (__Lmediumconst shr (0+16))
   173  00724A  6EF8               	movwf	tblptru,c
   174  00724C  0100               	movlb	0
   175  00724E  EFC8  F03E         	goto	_main	;jump to C main() function
   176                           tblptru	equ	0xFF8
   177                           tblptrh	equ	0xFF7
   178                           tblptrl	equ	0xFF6
   179                           tablat	equ	0xFF5
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           postdec1	equ	0xFE5
   183                           fsr1l	equ	0xFE1
   184                           
   185                           	psect	bssCOMRAM
   186  000056                     __pbssCOMRAM:
   187                           	opt stack 0
   188  000056                     _errno:
   189                           	opt stack 0
   190  000056                     	ds	2
   191  000058                     _index_color_:
   192                           	opt stack 0
   193  000058                     	ds	2
   194  00005A                     _msg:
   195                           	opt stack 0
   196  00005A                     	ds	1
   197  00005B                     __pwm_count:
   198                           	opt stack 0
   199  00005B                     	ds	2
   200                           tblptru	equ	0xFF8
   201                           tblptrh	equ	0xFF7
   202                           tblptrl	equ	0xFF6
   203                           tablat	equ	0xFF5
   204                           postinc0	equ	0xFEE
   205                           wreg	equ	0xFE8
   206                           postdec1	equ	0xFE5
   207                           fsr1l	equ	0xFE1
   208                           
   209                           	psect	dataCOMRAM
   210  00004C                     __pdataCOMRAM:
   211                           	opt stack 0
   212  00004C                     _color_pages_:
   213                           	opt stack 0
   214  00004C                     	ds	8
   215  000054                     __last_z:
   216                           	opt stack 0
   217  000054                     	ds	1
   218  000055                     __last_x:
   219                           	opt stack 0
   220  000055                     	ds	1
   221                           tblptru	equ	0xFF8
   222                           tblptrh	equ	0xFF7
   223                           tblptrl	equ	0xFF6
   224                           tablat	equ	0xFF5
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           postdec1	equ	0xFE5
   228                           fsr1l	equ	0xFE1
   229                           
   230                           	psect	cstackBANK0
   231  000060                     __pcstackBANK0:
   232                           	opt stack 0
   233  000060                     main@x:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x0
   237  000060                     	ds	2
   238  000062                     main@valid_z:
   239                           	opt stack 0
   240                           
   241                           ; 2 bytes @ 0x2
   242  000062                     	ds	2
   243  000064                     main@rate_z:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0x4
   247  000064                     	ds	2
   248  000066                     _main$259:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x6
   252  000066                     	ds	2
   253  000068                     main@count_z:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x8
   257  000068                     	ds	2
   258  00006A                     main@isLightON:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0xA
   262  00006A                     	ds	1
   263  00006B                     main@z:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0xB
   267  00006B                     	ds	2
   268  00006D                     main@substate_toggle:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0xD
   272  00006D                     	ds	2
   273  00006F                     main@data_2:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0xF
   277  00006F                     	ds	2
   278  000071                     main@gesture:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x11
   282  000071                     	ds	1
   283  000072                     main@count_tchau:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x12
   287  000072                     	ds	2
   288  000074                     main@data_1:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x14
   292  000074                     	ds	2
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           postinc0	equ	0xFEE
   298                           wreg	equ	0xFE8
   299                           postdec1	equ	0xFE5
   300                           fsr1l	equ	0xFE1
   301                           
   302                           	psect	cstackCOMRAM
   303  000001                     __pcstackCOMRAM:
   304                           	opt stack 0
   305  000001                     ?_anyGestureAvailable:
   306                           	opt stack 0
   307  000001                     ?_abs:
   308                           	opt stack 0
   309  000001                     ?_getLastZ:
   310                           	opt stack 0
   311  000001                     ?_getLastX:
   312                           	opt stack 0
   313  000001                     ?___wmul:
   314                           	opt stack 0
   315  000001                     ?___ftpack:
   316                           	opt stack 0
   317  000001                     led_control@ledCor:
   318                           	opt stack 0
   319  000001                     UART_Write@data:
   320                           	opt stack 0
   321  000001                     anyGestureAvailable@gesture:
   322                           	opt stack 0
   323  000001                     ___wmul@multiplier:
   324                           	opt stack 0
   325  000001                     abs@a:
   326                           	opt stack 0
   327  000001                     ___ftpack@arg:
   328                           	opt stack 0
   329  000001                     frexp@value:
   330                           	opt stack 0
   331  000001                     ___ftge@ff1:
   332                           	opt stack 0
   333                           
   334                           ; 3 bytes @ 0x0
   335  000001                     	ds	1
   336  000002                     ledBlink@c:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x1
   340  000002                     	ds	1
   341  000003                     ??_abs:
   342  000003                     anyGestureAvailable@data1:
   343                           	opt stack 0
   344  000003                     ___wmul@multiplicand:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x2
   348  000003                     	ds	1
   349  000004                     ___ftpack@exp:
   350                           	opt stack 0
   351  000004                     ledBlink@d:
   352                           	opt stack 0
   353  000004                     frexp@eptr:
   354                           	opt stack 0
   355  000004                     ___ftge@ff2:
   356                           	opt stack 0
   357                           
   358                           ; 3 bytes @ 0x3
   359  000004                     	ds	1
   360  000005                     ___ftpack@sign:
   361                           	opt stack 0
   362  000005                     anyGestureAvailable@data2:
   363                           	opt stack 0
   364  000005                     ___wmul@product:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x4
   368  000005                     	ds	1
   369  000006                     ??___ftpack:
   370  000006                     ??_frexp:
   371                           
   372                           ; 1 bytes @ 0x5
   373  000006                     	ds	1
   374  000007                     ??_anyGestureAvailable:
   375  000007                     ??___ftge:
   376  000007                     ?___awdiv:
   377                           	opt stack 0
   378  000007                     ___awdiv@dividend:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x6
   382  000007                     	ds	2
   383  000009                     _anyGestureAvailable$295:
   384                           	opt stack 0
   385  000009                     ___awdiv@divisor:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x8
   389  000009                     	ds	2
   390  00000B                     ___awdiv@counter:
   391                           	opt stack 0
   392  00000B                     _anyGestureAvailable$296:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0xA
   396  00000B                     	ds	1
   397  00000C                     ___awdiv@sign:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0xB
   401  00000C                     	ds	1
   402  00000D                     ___awdiv@quotient:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0xC
   406  00000D                     	ds	2
   407  00000F                     ?___awtoft:
   408                           	opt stack 0
   409  00000F                     ___awtoft@c:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0xE
   413  00000F                     	ds	3
   414  000012                     ___awtoft@sign:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x11
   418  000012                     	ds	1
   419  000013                     ?___ftadd:
   420                           	opt stack 0
   421  000013                     ___ftadd@f1:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0x12
   425  000013                     	ds	3
   426  000016                     ___ftadd@f2:
   427                           	opt stack 0
   428                           
   429                           ; 3 bytes @ 0x15
   430  000016                     	ds	3
   431  000019                     ??___ftadd:
   432                           
   433                           ; 1 bytes @ 0x18
   434  000019                     	ds	3
   435  00001C                     ___ftadd@sign:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x1B
   439  00001C                     	ds	1
   440  00001D                     ___ftadd@exp2:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x1C
   444  00001D                     	ds	1
   445  00001E                     ___ftadd@exp1:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x1D
   449  00001E                     	ds	1
   450  00001F                     ?___fttol:
   451                           	opt stack 0
   452  00001F                     ___fttol@f1:
   453                           	opt stack 0
   454                           
   455                           ; 3 bytes @ 0x1E
   456  00001F                     	ds	4
   457  000023                     ??___fttol:
   458                           
   459                           ; 1 bytes @ 0x22
   460  000023                     	ds	5
   461  000028                     ___fttol@sign1:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x27
   465  000028                     	ds	1
   466  000029                     ___fttol@lval:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x28
   470  000029                     	ds	4
   471  00002D                     ___fttol@exp1:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x2C
   475  00002D                     	ds	1
   476  00002E                     ?___altoft:
   477                           	opt stack 0
   478  00002E                     ___altoft@c:
   479                           	opt stack 0
   480                           
   481                           ; 4 bytes @ 0x2D
   482  00002E                     	ds	4
   483  000032                     ??___altoft:
   484                           
   485                           ; 1 bytes @ 0x31
   486  000032                     	ds	4
   487  000036                     ___altoft@exp:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x35
   491  000036                     	ds	1
   492  000037                     ___altoft@sign:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x36
   496  000037                     	ds	1
   497  000038                     ?_ceil:
   498                           	opt stack 0
   499  000038                     ceil@x:
   500                           	opt stack 0
   501                           
   502                           ; 3 bytes @ 0x37
   503  000038                     	ds	3
   504  00003B                     ceil@i:
   505                           	opt stack 0
   506                           
   507                           ; 3 bytes @ 0x3A
   508  00003B                     	ds	3
   509  00003E                     ceil@expon:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x3D
   513  00003E                     	ds	2
   514  000040                     ?___ftneg:
   515                           	opt stack 0
   516  000040                     ___ftneg@f1:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x3F
   520  000040                     	ds	3
   521  000043                     _increasePWM$915:
   522                           	opt stack 0
   523  000043                     _decreasePWM$916:
   524                           	opt stack 0
   525                           
   526                           ; 3 bytes @ 0x42
   527  000043                     	ds	3
   528  000046                     _increasePWM$186:
   529                           	opt stack 0
   530  000046                     _decreasePWM$189:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x45
   534  000046                     	ds	2
   535  000048                     increasePWM@val:
   536                           	opt stack 0
   537  000048                     decreasePWM@val:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x47
   541  000048                     	ds	2
   542  00004A                     ??_main:
   543                           
   544                           ; 1 bytes @ 0x49
   545  00004A                     	ds	2
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           postdec1	equ	0xFE5
   553                           fsr1l	equ	0xFE1
   554                           
   555 ;;
   556 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   557 ;;
   558 ;; *************** function _main *****************
   559 ;; Defined at:
   560 ;;		line 38 in file "main.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  data_1          2   20[BANK0 ] int 
   565 ;;  count_tchau     2   18[BANK0 ] int 
   566 ;;  data_2          2   15[BANK0 ] int 
   567 ;;  substate_tog    2   13[BANK0 ] int 
   568 ;;  z               2   11[BANK0 ] int 
   569 ;;  count_z         2    8[BANK0 ] int 
   570 ;;  rate_z          2    4[BANK0 ] int 
   571 ;;  valid_z         2    2[BANK0 ] int 
   572 ;;  x               2    0[BANK0 ] int 
   573 ;;  gesture         1   17[BANK0 ] unsigned char 
   574 ;;  isLightON       1   10[BANK0 ] unsigned char 
   575 ;; Return value:  Size  Location     Type
   576 ;;                  1    wreg      void 
   577 ;; Registers used:
   578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   579 ;; Tracked objects:
   580 ;;		On entry : 0/0
   581 ;;		On exit  : 0/0
   582 ;;		Unchanged: 0/0
   583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   584 ;;      Params:         0       0       0       0       0       0       0       0       0
   585 ;;      Locals:         0      22       0       0       0       0       0       0       0
   586 ;;      Temps:          2       0       0       0       0       0       0       0       0
   587 ;;      Totals:         2      22       0       0       0       0       0       0       0
   588 ;;Total ram usage:       24 bytes
   589 ;; Hardware stack levels required when called:    4
   590 ;; This function calls:
   591 ;;		_AFSmartBoard_Init
   592 ;;		_UART_Write
   593 ;;		_abs
   594 ;;		_anyGestureAvailable
   595 ;;		_decreasePWM
   596 ;;		_getLastX
   597 ;;		_getLastZ
   598 ;;		_increasePWM
   599 ;;		_init_XZ_Gesture
   600 ;;		_init_ledRGB
   601 ;;		_ledBlink
   602 ;;		_ledOFF
   603 ;;		_ledON
   604 ;;		_nextPage
   605 ;;		_prevPage
   606 ;; This function is called by:
   607 ;;		Startup code after reset
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           	psect	text0
   612  007D90                     __ptext0:
   613                           	opt stack 0
   614  007D90                     _main:
   615                           	opt stack 27
   616                           
   617                           ;main.c: 40: char isLightON = 0;
   618                           
   619                           ;incstack = 0
   620  007D90  0E00               	movlw	0
   621  007D92  0100               	movlb	0	; () banked
   622  007D94  6F6A               	movwf	main@isLightON& (0+255),b
   623                           
   624                           ;main.c: 43: int x = 0xFF;
   625  007D96  0E00               	movlw	0
   626  007D98  6F61               	movwf	(main@x+1)& (0+255),b
   627  007D9A  6960               	setf	main@x& (0+255),b
   628                           
   629                           ;main.c: 44: int z = 0xFF;
   630  007D9C  0E00               	movlw	0
   631  007D9E  6F6C               	movwf	(main@z+1)& (0+255),b
   632  007DA0  696B               	setf	main@z& (0+255),b
   633                           
   634                           ;main.c: 47: int valid_z = 0;
   635  007DA2  0E00               	movlw	0
   636  007DA4  6F63               	movwf	(main@valid_z+1)& (0+255),b
   637  007DA6  0E00               	movlw	0
   638  007DA8  6F62               	movwf	main@valid_z& (0+255),b
   639                           
   640                           ;main.c: 48: int rate_z = 0;
   641  007DAA  0E00               	movlw	0
   642  007DAC  6F65               	movwf	(main@rate_z+1)& (0+255),b
   643  007DAE  0E00               	movlw	0
   644  007DB0  6F64               	movwf	main@rate_z& (0+255),b
   645                           
   646                           ;main.c: 49: int count_z = 0;
   647  007DB2  0E00               	movlw	0
   648  007DB4  6F69               	movwf	(main@count_z+1)& (0+255),b
   649  007DB6  0E00               	movlw	0
   650  007DB8  6F68               	movwf	main@count_z& (0+255),b
   651                           
   652                           ;main.c: 52: int count_tchau = 0;
   653  007DBA  0E00               	movlw	0
   654  007DBC  6F73               	movwf	(main@count_tchau+1)& (0+255),b
   655  007DBE  0E00               	movlw	0
   656  007DC0  6F72               	movwf	main@count_tchau& (0+255),b
   657                           
   658                           ;main.c: 55: uint8_t gesture = 0;
   659  007DC2  0E00               	movlw	0
   660  007DC4  6F71               	movwf	main@gesture& (0+255),b
   661                           
   662                           ;main.c: 56: int data_1 = 0;
   663  007DC6  0E00               	movlw	0
   664  007DC8  6F75               	movwf	(main@data_1+1)& (0+255),b
   665  007DCA  0E00               	movlw	0
   666  007DCC  6F74               	movwf	main@data_1& (0+255),b
   667                           
   668                           ;main.c: 57: int data_2 = 0;
   669  007DCE  0E00               	movlw	0
   670  007DD0  6F70               	movwf	(main@data_2+1)& (0+255),b
   671  007DD2  0E00               	movlw	0
   672  007DD4  6F6F               	movwf	main@data_2& (0+255),b
   673                           
   674                           ;main.c: 59: int substate_toggle = 1;
   675  007DD6  0E00               	movlw	0
   676  007DD8  6F6E               	movwf	(main@substate_toggle+1)& (0+255),b
   677  007DDA  0E01               	movlw	1
   678  007DDC  6F6D               	movwf	main@substate_toggle& (0+255),b
   679                           
   680                           ; BSR set to: 0
   681                           ;main.c: 61: AFSmartBoard_Init();
   682  007DDE  ECF7  F038         	call	_AFSmartBoard_Init	;wreg free
   683                           
   684                           ;main.c: 62: init_ledRGB();
   685  007DE2  EC91  F038         	call	_init_ledRGB	;wreg free
   686                           
   687                           ;main.c: 63: init_XZ_Gesture();
   688  007DE6  EC6F  F038         	call	_init_XZ_Gesture	;wreg free
   689  007DEA                     
   690                           ;main.c: 73: if(isLightON == 0){
   691  007DEA  0100               	movlb	0	; () banked
   692  007DEC  516A               	movf	main@isLightON& (0+255),w,b
   693  007DEE  A4D8               	btfss	status,2,c
   694  007DF0  D06D               	goto	l153
   695                           
   696                           ; BSR set to: 0
   697                           ;main.c: 74: if(anyGestureAvailable(&gesture, &data_1, &data_2)){
   698  007DF2  0E71               	movlw	low main@gesture
   699  007DF4  6E01               	movwf	anyGestureAvailable@gesture,c
   700  007DF6  0E00               	movlw	high main@gesture
   701  007DF8  6E02               	movwf	anyGestureAvailable@gesture+1,c
   702  007DFA  0E74               	movlw	low main@data_1
   703  007DFC  6E03               	movwf	anyGestureAvailable@data1,c
   704  007DFE  0E00               	movlw	high main@data_1
   705  007E00  6E04               	movwf	anyGestureAvailable@data1+1,c
   706  007E02  0E6F               	movlw	low main@data_2
   707  007E04  6E05               	movwf	anyGestureAvailable@data2,c
   708  007E06  0E00               	movlw	high main@data_2
   709  007E08  6E06               	movwf	anyGestureAvailable@data2+1,c
   710  007E0A  ECD3  F03D         	call	_anyGestureAvailable	;wreg free
   711  007E0E  5001               	movf	?_anyGestureAvailable,w,c
   712  007E10  1002               	iorwf	?_anyGestureAvailable+1,w,c
   713  007E12  B4D8               	btfsc	status,2,c
   714  007E14  D7EA               	goto	l152
   715                           
   716                           ;main.c: 77: if(gesture == 0xFC){
   717  007E16  0EFC               	movlw	252
   718  007E18  0100               	movlb	0	; () banked
   719  007E1A  1971               	xorwf	main@gesture& (0+255),w,b
   720  007E1C  B4D8               	btfsc	status,2,c
   721  007E1E  D031               	goto	l156
   722  007E20  D7E4               	goto	l152
   723  007E22                     
   724                           ; BSR set to: 0
   725                           ;main.c: 80: count_tchau = count_tchau == -1 ? count_tchau - 1 : count_tchau == 1 ? 0 : 
      +                          1;
   726                           
   727                           ; BSR set to: 0
   728  007E22  2972               	incf	main@count_tchau& (0+255),w,b
   729  007E24  E103               	bnz	u1840
   730  007E26  2973               	incf	(main@count_tchau+1)& (0+255),w,b
   731  007E28  B4D8               	btfsc	status,2,c
   732  007E2A  D00A               	goto	l159
   733  007E2C                     u1840:
   734                           
   735                           ; BSR set to: 0
   736  007E2C  0572               	decf	main@count_tchau& (0+255),w,b
   737  007E2E  1173               	iorwf	(main@count_tchau+1)& (0+255),w,b
   738  007E30  B4D8               	btfsc	status,2,c
   739  007E32  D002               	goto	u1850
   740  007E34  0E01               	movlw	1
   741  007E36  D001               	goto	u1860
   742  007E38                     u1850:
   743  007E38  0E00               	movlw	0
   744  007E3A                     u1860:
   745  007E3A  6F72               	movwf	main@count_tchau& (0+255),b
   746  007E3C  6B73               	clrf	(main@count_tchau+1)& (0+255),b
   747  007E3E  D030               	goto	l162
   748  007E40                     l159:
   749                           
   750                           ; BSR set to: 0
   751                           
   752                           ; BSR set to: 0
   753  007E40  0EFF               	movlw	255
   754  007E42  2572               	addwf	main@count_tchau& (0+255),w,b
   755  007E44  6F72               	movwf	main@count_tchau& (0+255),b
   756  007E46  0EFF               	movlw	255
   757  007E48  D019               	goto	L1
   758  007E4A                     
   759                           ; BSR set to: 0
   760                           ;main.c: 83: count_tchau = count_tchau == 1 ? count_tchau + 1 : count_tchau == -1 ? 0 : 
      +                          -1;
   761                           
   762                           ; BSR set to: 0
   763  007E4A  0572               	decf	main@count_tchau& (0+255),w,b
   764  007E4C  1173               	iorwf	(main@count_tchau+1)& (0+255),w,b
   765  007E4E  B4D8               	btfsc	status,2,c
   766  007E50  D011               	goto	l165
   767                           
   768                           ; BSR set to: 0
   769  007E52  2972               	incf	main@count_tchau& (0+255),w,b
   770  007E54  E103               	bnz	u1880
   771  007E56  2973               	incf	(main@count_tchau+1)& (0+255),w,b
   772  007E58  B4D8               	btfsc	status,2,c
   773  007E5A  D003               	goto	l169
   774  007E5C                     u1880:
   775                           
   776                           ; BSR set to: 0
   777  007E5C  6966               	setf	_main$259& (0+255),b
   778  007E5E  6967               	setf	(_main$259+1)& (0+255),b
   779  007E60  D004               	goto	l171
   780  007E62                     l169:
   781                           
   782                           ; BSR set to: 0
   783                           
   784                           ; BSR set to: 0
   785  007E62  0E00               	movlw	0
   786  007E64  6F67               	movwf	(_main$259+1)& (0+255),b
   787  007E66  0E00               	movlw	0
   788  007E68  6F66               	movwf	_main$259& (0+255),b
   789  007E6A                     l171:
   790                           
   791                           ; BSR set to: 0
   792                           
   793                           ; BSR set to: 0
   794  007E6A  C066  F072         	movff	_main$259,main@count_tchau
   795  007E6E  C067  F073         	movff	_main$259+1,main@count_tchau+1
   796  007E72  D016               	goto	l162
   797  007E74                     l165:
   798                           
   799                           ; BSR set to: 0
   800                           
   801                           ; BSR set to: 0
   802  007E74  0E01               	movlw	1
   803  007E76  2572               	addwf	main@count_tchau& (0+255),w,b
   804  007E78  6F72               	movwf	main@count_tchau& (0+255),b
   805  007E7A  0E00               	movlw	0
   806  007E7C                     L1:
   807  007E7C  2173               	addwfc	(main@count_tchau+1)& (0+255),w,b
   808  007E7E  6F73               	movwf	(main@count_tchau+1)& (0+255),b
   809                           
   810                           ; BSR set to: 0
   811                           ;main.c: 85: }
   812                           
   813                           ; BSR set to: 0
   814                           ;main.c: 84: break;
   815  007E80  D00F               	goto	l162
   816  007E82                     l156:
   817                           
   818                           ; BSR set to: 0
   819                           
   820                           ; BSR set to: 0
   821  007E82  C074  F04A         	movff	main@data_1,??_main
   822  007E86  C075  F04B         	movff	main@data_1+1,??_main+1
   823                           
   824                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   825                           ; Switch size 1, requested type "space"
   826                           ; Number of cases is 1, Range of values is 0 to 0
   827                           ; switch strategies available:
   828                           ; Name         Instructions Cycles
   829                           ; simple_byte            4     3 (average)
   830                           ;	Chosen strategy is simple_byte
   831  007E8A  504B               	movf	??_main+1,w,c
   832  007E8C  0A00               	xorlw	0	; case 0
   833  007E8E  A4D8               	btfss	status,2,c
   834  007E90  D007               	goto	l162
   835                           
   836                           ; BSR set to: 0
   837                           ; Switch size 1, requested type "space"
   838                           ; Number of cases is 2, Range of values is 1 to 2
   839                           ; switch strategies available:
   840                           ; Name         Instructions Cycles
   841                           ; simple_byte            7     4 (average)
   842                           ;	Chosen strategy is simple_byte
   843  007E92  504A               	movf	??_main,w,c
   844  007E94  0A01               	xorlw	1	; case 1
   845  007E96  B4D8               	btfsc	status,2,c
   846  007E98  D7C4               	goto	l157
   847  007E9A  0A03               	xorlw	3	; case 2
   848  007E9C  B4D8               	btfsc	status,2,c
   849  007E9E  D7D5               	goto	l163
   850  007EA0                     l162:
   851                           
   852                           ; BSR set to: 0
   853                           ;main.c: 86: if(abs(count_tchau) == 2){
   854                           
   855                           ; BSR set to: 0
   856  007EA0  C072  F001         	movff	main@count_tchau,abs@a
   857  007EA4  C073  F002         	movff	main@count_tchau+1,abs@a+1
   858  007EA8  ECE3  F038         	call	_abs	;wreg free
   859  007EAC  0E02               	movlw	2
   860  007EAE  1801               	xorwf	?_abs,w,c
   861  007EB0  1002               	iorwf	?_abs+1,w,c
   862  007EB2  A4D8               	btfss	status,2,c
   863  007EB4  D79A               	goto	l152
   864                           
   865                           ;main.c: 87: isLightON = 1;
   866  007EB6  0E01               	movlw	1
   867  007EB8  0100               	movlb	0	; () banked
   868  007EBA  6F6A               	movwf	main@isLightON& (0+255),b
   869                           
   870                           ; BSR set to: 0
   871                           ;main.c: 88: ledON();
   872  007EBC  EC99  F038         	call	_ledON	;wreg free
   873                           
   874                           ;main.c: 89: count_tchau = 0;
   875  007EC0  0E00               	movlw	0
   876  007EC2  0100               	movlb	0	; () banked
   877  007EC4  6F73               	movwf	(main@count_tchau+1)& (0+255),b
   878  007EC6  0E00               	movlw	0
   879  007EC8  6F72               	movwf	main@count_tchau& (0+255),b
   880                           
   881                           ; BSR set to: 0
   882                           ;main.c: 91: }
   883                           ;main.c: 92: }
   884                           ;main.c: 94: }
   885                           ;main.c: 97: }else{
   886                           
   887                           ; BSR set to: 0
   888                           
   889                           ; BSR set to: 0
   890  007ECA  D78F               	goto	l152
   891  007ECC                     l153:
   892                           
   893                           ; BSR set to: 0
   894                           ;main.c: 98: if(count_z > 250){
   895                           
   896                           ; BSR set to: 0
   897  007ECC  BF69               	btfsc	(main@count_z+1)& (0+255),7,b
   898  007ECE  D00F               	goto	l174
   899  007ED0  5169               	movf	(main@count_z+1)& (0+255),w,b
   900  007ED2  E104               	bnz	u1900
   901  007ED4  0EFB               	movlw	251
   902  007ED6  5D68               	subwf	main@count_z& (0+255),w,b
   903  007ED8  A0D8               	btfss	status,0,c
   904  007EDA  D009               	goto	l174
   905  007EDC                     u1900:
   906                           
   907                           ; BSR set to: 0
   908                           ;main.c: 99: count_z = 0;
   909  007EDC  0E00               	movlw	0
   910  007EDE  6F69               	movwf	(main@count_z+1)& (0+255),b
   911  007EE0  0E00               	movlw	0
   912  007EE2  6F68               	movwf	main@count_z& (0+255),b
   913                           
   914                           ;main.c: 100: isLightON = 0;
   915  007EE4  0E00               	movlw	0
   916  007EE6  6F6A               	movwf	main@isLightON& (0+255),b
   917                           
   918                           ; BSR set to: 0
   919                           ;main.c: 101: ledOFF();
   920  007EE8  EC82  F038         	call	_ledOFF	;wreg free
   921                           
   922                           ;main.c: 103: }
   923                           
   924                           ;main.c: 102: continue;
   925  007EEC  D77E               	goto	l152
   926  007EEE                     l174:
   927                           
   928                           ;main.c: 104: else if(anyGestureAvailable(&gesture, &data_1, &data_2)){
   929  007EEE  0E71               	movlw	low main@gesture
   930  007EF0  6E01               	movwf	anyGestureAvailable@gesture,c
   931  007EF2  0E00               	movlw	high main@gesture
   932  007EF4  6E02               	movwf	anyGestureAvailable@gesture+1,c
   933  007EF6  0E74               	movlw	low main@data_1
   934  007EF8  6E03               	movwf	anyGestureAvailable@data1,c
   935  007EFA  0E00               	movlw	high main@data_1
   936  007EFC  6E04               	movwf	anyGestureAvailable@data1+1,c
   937  007EFE  0E6F               	movlw	low main@data_2
   938  007F00  6E05               	movwf	anyGestureAvailable@data2,c
   939  007F02  0E00               	movlw	high main@data_2
   940  007F04  6E06               	movwf	anyGestureAvailable@data2+1,c
   941  007F06  ECD3  F03D         	call	_anyGestureAvailable	;wreg free
   942  007F0A  5001               	movf	?_anyGestureAvailable,w,c
   943  007F0C  1002               	iorwf	?_anyGestureAvailable+1,w,c
   944  007F0E  B4D8               	btfsc	status,2,c
   945  007F10  D76C               	goto	l152
   946                           
   947                           ;main.c: 107: z = getLastZ();
   948  007F12  EC7E  F038         	call	_getLastZ	;wreg free
   949  007F16  C001  F06B         	movff	?_getLastZ,main@z
   950  007F1A  C002  F06C         	movff	?_getLastZ+1,main@z+1
   951                           
   952                           ;main.c: 108: if(z != 0xFF){
   953  007F1E  0100               	movlb	0	; () banked
   954  007F20  296B               	incf	main@z& (0+255),w,b
   955  007F22  116C               	iorwf	(main@z+1)& (0+255),w,b
   956  007F24  B4D8               	btfsc	status,2,c
   957  007F26  D028               	goto	l180
   958                           
   959                           ; BSR set to: 0
   960                           ;main.c: 110: rate_z = abs(valid_z - z);
   961  007F28  C06B  F04A         	movff	main@z,??_main
   962  007F2C  C06C  F04B         	movff	main@z+1,??_main+1
   963  007F30  1E4A               	comf	??_main,f,c
   964  007F32  1E4B               	comf	??_main+1,f,c
   965  007F34  4A4A               	infsnz	??_main,f,c
   966  007F36  2A4B               	incf	??_main+1,f,c
   967  007F38  5162               	movf	main@valid_z& (0+255),w,b
   968  007F3A  244A               	addwf	??_main,w,c
   969  007F3C  6E01               	movwf	abs@a,c
   970  007F3E  5163               	movf	(main@valid_z+1)& (0+255),w,b
   971  007F40  204B               	addwfc	??_main+1,w,c
   972  007F42  6E02               	movwf	abs@a+1,c
   973  007F44  ECE3  F038         	call	_abs	;wreg free
   974  007F48  C001  F064         	movff	?_abs,main@rate_z
   975  007F4C  C002  F065         	movff	?_abs+1,main@rate_z+1
   976                           
   977                           ;main.c: 111: if(rate_z < 15){
   978  007F50  0100               	movlb	0	; () banked
   979  007F52  BF65               	btfsc	(main@rate_z+1)& (0+255),7,b
   980  007F54  D006               	goto	u1930
   981  007F56  5165               	movf	(main@rate_z+1)& (0+255),w,b
   982  007F58  E107               	bnz	l179
   983  007F5A  0E0F               	movlw	15
   984  007F5C  5D64               	subwf	main@rate_z& (0+255),w,b
   985  007F5E  B0D8               	btfsc	status,0,c
   986  007F60  D003               	goto	l179
   987  007F62                     u1930:
   988                           
   989                           ; BSR set to: 0
   990                           ;main.c: 112: count_z += 1;
   991  007F62  4B68               	infsnz	main@count_z& (0+255),f,b
   992  007F64  2B69               	incf	(main@count_z+1)& (0+255),f,b
   993                           
   994                           ;main.c: 113: }else{
   995  007F66  D008               	goto	l180
   996  007F68                     l179:
   997                           
   998                           ; BSR set to: 0
   999                           ;main.c: 114: valid_z = z;
  1000  007F68  C06B  F062         	movff	main@z,main@valid_z
  1001  007F6C  C06C  F063         	movff	main@z+1,main@valid_z+1
  1002                           
  1003                           ; BSR set to: 0
  1004                           ;main.c: 115: count_z = 0;
  1005  007F70  0E00               	movlw	0
  1006  007F72  6F69               	movwf	(main@count_z+1)& (0+255),b
  1007  007F74  0E00               	movlw	0
  1008  007F76  6F68               	movwf	main@count_z& (0+255),b
  1009  007F78                     l180:
  1010                           
  1011                           ; BSR set to: 0
  1012                           ;main.c: 116: }
  1013                           ;main.c: 117: }
  1014                           ;main.c: 119: x = getLastX();
  1015                           
  1016                           ; BSR set to: 0
  1017                           
  1018                           ; BSR set to: 0
  1019  007F78  EC7A  F038         	call	_getLastX	;wreg free
  1020  007F7C  C001  F060         	movff	?_getLastX,main@x
  1021  007F80  C002  F061         	movff	?_getLastX+1,main@x+1
  1022                           
  1023                           ;main.c: 122: UART_Write(x);
  1024  007F84  0100               	movlb	0	; () banked
  1025  007F86  5160               	movf	main@x& (0+255),w,b
  1026  007F88  EC8B  F038         	call	_UART_Write
  1027                           
  1028                           ;main.c: 123: if(gesture == 0xFC){
  1029  007F8C  0EFC               	movlw	252
  1030  007F8E  0100               	movlb	0	; () banked
  1031  007F90  1971               	xorwf	main@gesture& (0+255),w,b
  1032  007F92  A4D8               	btfss	status,2,c
  1033  007F94  D72A               	goto	l152
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 125: if(data_1 == 0x03){
  1037  007F96  0E03               	movlw	3
  1038  007F98  1974               	xorwf	main@data_1& (0+255),w,b
  1039  007F9A  1175               	iorwf	(main@data_1+1)& (0+255),w,b
  1040  007F9C  A4D8               	btfss	status,2,c
  1041  007F9E  D00C               	goto	l182
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;main.c: 126: substate_toggle = substate_toggle == 0 ? 1 : 0;
  1045  007FA0  516D               	movf	main@substate_toggle& (0+255),w,b
  1046  007FA2  116E               	iorwf	(main@substate_toggle+1)& (0+255),w,b
  1047  007FA4  A4D8               	btfss	status,2,c
  1048  007FA6  D002               	goto	u1960
  1049  007FA8  0E01               	movlw	1
  1050  007FAA  D001               	goto	u1970
  1051  007FAC                     u1960:
  1052  007FAC  0E00               	movlw	0
  1053  007FAE                     u1970:
  1054  007FAE  6F6D               	movwf	main@substate_toggle& (0+255),b
  1055  007FB0  6B6E               	clrf	(main@substate_toggle+1)& (0+255),b
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;main.c: 127: ledBlink();
  1059  007FB2  EC7E  F039         	call	_ledBlink	;wreg free
  1060                           
  1061                           ;main.c: 128: continue;
  1062  007FB6  D719               	goto	l152
  1063  007FB8                     l182:
  1064                           
  1065                           ;main.c: 129: }
  1066                           ;main.c: 131: if(substate_toggle == 1){
  1067  007FB8  0100               	movlb	0	; () banked
  1068  007FBA  056D               	decf	main@substate_toggle& (0+255),w,b
  1069  007FBC  116E               	iorwf	(main@substate_toggle+1)& (0+255),w,b
  1070  007FBE  A4D8               	btfss	status,2,c
  1071  007FC0  D00C               	goto	l185
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;main.c: 132: if(data_1 == 0x01){
  1075  007FC2  0574               	decf	main@data_1& (0+255),w,b
  1076  007FC4  1175               	iorwf	(main@data_1+1)& (0+255),w,b
  1077  007FC6  B4D8               	btfsc	status,2,c
  1078                           
  1079                           ; BSR set to: 0
  1080                           ;main.c: 133: increasePWM();
  1081  007FC8  EC9C  F03B         	call	_increasePWM	;wreg free
  1082                           
  1083                           ;main.c: 134: }
  1084                           ;main.c: 135: if(data_1 == 0x02){
  1085  007FCC  0E02               	movlw	2
  1086  007FCE  0100               	movlb	0	; () banked
  1087  007FD0  1974               	xorwf	main@data_1& (0+255),w,b
  1088  007FD2  1175               	iorwf	(main@data_1+1)& (0+255),w,b
  1089  007FD4  B4D8               	btfsc	status,2,c
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 136: decreasePWM();
  1093  007FD6  EC36  F03B         	call	_decreasePWM	;wreg free
  1094  007FDA                     l185:
  1095                           
  1096                           ;main.c: 137: }
  1097                           ;main.c: 138: }
  1098                           ;main.c: 141: if(substate_toggle == 0){
  1099  007FDA  0100               	movlb	0	; () banked
  1100  007FDC  516D               	movf	main@substate_toggle& (0+255),w,b
  1101  007FDE  116E               	iorwf	(main@substate_toggle+1)& (0+255),w,b
  1102  007FE0  A4D8               	btfss	status,2,c
  1103  007FE2  D703               	goto	l152
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;main.c: 142: if(data_1 == 0x01){
  1107  007FE4  0574               	decf	main@data_1& (0+255),w,b
  1108  007FE6  1175               	iorwf	(main@data_1+1)& (0+255),w,b
  1109  007FE8  B4D8               	btfsc	status,2,c
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;main.c: 143: nextPage();
  1113  007FEA  EC61  F039         	call	_nextPage	;wreg free
  1114                           
  1115                           ;main.c: 144: }
  1116                           ;main.c: 145: if(data_1 == 0x02){
  1117  007FEE  0E02               	movlw	2
  1118  007FF0  0100               	movlb	0	; () banked
  1119  007FF2  1974               	xorwf	main@data_1& (0+255),w,b
  1120  007FF4  1175               	iorwf	(main@data_1+1)& (0+255),w,b
  1121  007FF6  A4D8               	btfss	status,2,c
  1122  007FF8  D6F8               	goto	l152
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;main.c: 146: prevPage();
  1126  007FFA  EC45  F039         	call	_prevPage	;wreg free
  1127  007FFE  D6F5               	goto	l152
  1128  008000                     __end_of_main:
  1129                           	opt stack 0
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           postdec1	equ	0xFE5
  1137                           fsr1l	equ	0xFE1
  1138                           status	equ	0xFD8
  1139                           
  1140 ;; *************** function _prevPage *****************
  1141 ;; Defined at:
  1142 ;;		line 152 in file "ledRGB.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;		None
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;		None
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  1    wreg      void 
  1149 ;; Registers used:
  1150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1156 ;;      Params:         0       0       0       0       0       0       0       0       0
  1157 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1158 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1159 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1160 ;;Total ram usage:        0 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; Hardware stack levels required when called:    1
  1163 ;; This function calls:
  1164 ;;		_led_control
  1165 ;; This function is called by:
  1166 ;;		_main
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           	psect	text1
  1171  00728A                     __ptext1:
  1172                           	opt stack 0
  1173  00728A                     _prevPage:
  1174                           	opt stack 29
  1175                           
  1176                           ;ledRGB.c: 153: index_color_ = index_color_ < 1 ? 6 : index_color_ -1;
  1177                           
  1178                           ;incstack = 0
  1179  00728A  BE59               	btfsc	_index_color_+1,7,c
  1180  00728C  D00C               	goto	l57
  1181  00728E  5059               	movf	_index_color_+1,w,c
  1182  007290  E103               	bnz	u1670
  1183  007292  0458               	decf	_index_color_,w,c
  1184  007294  A0D8               	btfss	status,0,c
  1185  007296  D007               	goto	l57
  1186  007298                     u1670:
  1187  007298  0EFF               	movlw	255
  1188  00729A  2458               	addwf	_index_color_,w,c
  1189  00729C  6E58               	movwf	_index_color_,c
  1190  00729E  0EFF               	movlw	255
  1191  0072A0  2059               	addwfc	_index_color_+1,w,c
  1192  0072A2  6E59               	movwf	_index_color_+1,c
  1193  0072A4  D004               	goto	l59
  1194  0072A6                     l57:
  1195  0072A6  0E00               	movlw	0
  1196  0072A8  6E59               	movwf	_index_color_+1,c
  1197  0072AA  0E06               	movlw	6
  1198  0072AC  6E58               	movwf	_index_color_,c
  1199  0072AE                     l59:
  1200                           
  1201                           ;ledRGB.c: 154: led_control(color_pages_[index_color_]);
  1202  0072AE  0E4C               	movlw	low _color_pages_
  1203  0072B0  2458               	addwf	_index_color_,w,c
  1204  0072B2  6ED9               	movwf	fsr2l,c
  1205  0072B4  0E00               	movlw	high _color_pages_
  1206  0072B6  2059               	addwfc	_index_color_+1,w,c
  1207  0072B8  6EDA               	movwf	fsr2h,c
  1208  0072BA  50DF               	movf	indf2,w,c
  1209  0072BC  EC19  F03A         	call	_led_control
  1210  0072C0  0012               	return		;funcret
  1211  0072C2                     __end_of_prevPage:
  1212                           	opt stack 0
  1213                           tblptru	equ	0xFF8
  1214                           tblptrh	equ	0xFF7
  1215                           tblptrl	equ	0xFF6
  1216                           tablat	equ	0xFF5
  1217                           postinc0	equ	0xFEE
  1218                           wreg	equ	0xFE8
  1219                           postdec1	equ	0xFE5
  1220                           fsr1l	equ	0xFE1
  1221                           indf2	equ	0xFDF
  1222                           fsr2h	equ	0xFDA
  1223                           fsr2l	equ	0xFD9
  1224                           status	equ	0xFD8
  1225                           
  1226 ;; *************** function _nextPage *****************
  1227 ;; Defined at:
  1228 ;;		line 146 in file "ledRGB.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;		None
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;		None
  1233 ;; Return value:  Size  Location     Type
  1234 ;;                  1    wreg      void 
  1235 ;; Registers used:
  1236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1242 ;;      Params:         0       0       0       0       0       0       0       0       0
  1243 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1244 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1245 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1246 ;;Total ram usage:        0 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    1
  1249 ;; This function calls:
  1250 ;;		_led_control
  1251 ;; This function is called by:
  1252 ;;		_main
  1253 ;; This function uses a non-reentrant model
  1254 ;;
  1255                           
  1256                           	psect	text2
  1257  0072C2                     __ptext2:
  1258                           	opt stack 0
  1259  0072C2                     _nextPage:
  1260                           	opt stack 29
  1261                           
  1262                           ;ledRGB.c: 147: index_color_ = index_color_ > 5 ? 0 : index_color_ +1;
  1263                           
  1264                           ;incstack = 0
  1265  0072C2  BE59               	btfsc	_index_color_+1,7,c
  1266  0072C4  D006               	goto	u1660
  1267  0072C6  5059               	movf	_index_color_+1,w,c
  1268  0072C8  E10B               	bnz	l1965
  1269  0072CA  0E06               	movlw	6
  1270  0072CC  5C58               	subwf	_index_color_,w,c
  1271  0072CE  B0D8               	btfsc	status,0,c
  1272  0072D0  D007               	goto	l50
  1273  0072D2                     u1660:
  1274  0072D2  0E01               	movlw	1
  1275  0072D4  2458               	addwf	_index_color_,w,c
  1276  0072D6  6E58               	movwf	_index_color_,c
  1277  0072D8  0E00               	movlw	0
  1278  0072DA  2059               	addwfc	_index_color_+1,w,c
  1279  0072DC  6E59               	movwf	_index_color_+1,c
  1280  0072DE  D004               	goto	l52
  1281  0072E0                     l50:
  1282  0072E0                     l1965:
  1283  0072E0  0E00               	movlw	0
  1284  0072E2  6E59               	movwf	_index_color_+1,c
  1285  0072E4  0E00               	movlw	0
  1286  0072E6  6E58               	movwf	_index_color_,c
  1287  0072E8                     l52:
  1288                           
  1289                           ;ledRGB.c: 148: led_control(color_pages_[index_color_]);
  1290  0072E8  0E4C               	movlw	low _color_pages_
  1291  0072EA  2458               	addwf	_index_color_,w,c
  1292  0072EC  6ED9               	movwf	fsr2l,c
  1293  0072EE  0E00               	movlw	high _color_pages_
  1294  0072F0  2059               	addwfc	_index_color_+1,w,c
  1295  0072F2  6EDA               	movwf	fsr2h,c
  1296  0072F4  50DF               	movf	indf2,w,c
  1297  0072F6  EC19  F03A         	call	_led_control
  1298  0072FA  0012               	return		;funcret
  1299  0072FC                     __end_of_nextPage:
  1300                           	opt stack 0
  1301                           tblptru	equ	0xFF8
  1302                           tblptrh	equ	0xFF7
  1303                           tblptrl	equ	0xFF6
  1304                           tablat	equ	0xFF5
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           postdec1	equ	0xFE5
  1308                           fsr1l	equ	0xFE1
  1309                           indf2	equ	0xFDF
  1310                           fsr2h	equ	0xFDA
  1311                           fsr2l	equ	0xFD9
  1312                           status	equ	0xFD8
  1313                           
  1314 ;; *************** function _ledBlink *****************
  1315 ;; Defined at:
  1316 ;;		line 165 in file "ledRGB.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  d               2    3[COMRAM] int 
  1321 ;;  c               2    1[COMRAM] int 
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      void 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1331 ;;      Params:         0       0       0       0       0       0       0       0       0
  1332 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1333 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1334 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1335 ;;Total ram usage:        4 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    2
  1338 ;; This function calls:
  1339 ;;		_ledOFF
  1340 ;;		_ledON
  1341 ;; This function is called by:
  1342 ;;		_main
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           	psect	text3
  1347  0072FC                     __ptext3:
  1348                           	opt stack 0
  1349  0072FC                     _ledBlink:
  1350                           	opt stack 28
  1351                           
  1352                           ;ledRGB.c: 166: int c, d;
  1353                           ;ledRGB.c: 167: ledOFF();
  1354                           
  1355                           ;incstack = 0
  1356  0072FC  EC82  F038         	call	_ledOFF	;wreg free
  1357                           
  1358                           ;ledRGB.c: 169: for (c = 1; c <= 500; c++)
  1359  007300  0E00               	movlw	0
  1360  007302  6E03               	movwf	ledBlink@c+1,c
  1361  007304  0E01               	movlw	1
  1362  007306  6E02               	movwf	ledBlink@c,c
  1363  007308                     l1981:
  1364  007308  BE03               	btfsc	ledBlink@c+1,7,c
  1365  00730A  D006               	goto	l69
  1366  00730C  0EF5               	movlw	245
  1367  00730E  5C02               	subwf	ledBlink@c,w,c
  1368  007310  0E01               	movlw	1
  1369  007312  5803               	subwfb	ledBlink@c+1,w,c
  1370  007314  B0D8               	btfsc	status,0,c
  1371  007316  D012               	goto	u1710
  1372  007318                     l69:
  1373                           
  1374                           ;ledRGB.c: 170: for (d = 1; d <= 400; d++)
  1375  007318  0E00               	movlw	0
  1376  00731A  6E05               	movwf	ledBlink@d+1,c
  1377  00731C  0E01               	movlw	1
  1378  00731E  6E04               	movwf	ledBlink@d,c
  1379  007320                     l1987:
  1380  007320  BE05               	btfsc	ledBlink@d+1,7,c
  1381  007322  D006               	goto	l71
  1382  007324  0E91               	movlw	145
  1383  007326  5C04               	subwf	ledBlink@d,w,c
  1384  007328  0E01               	movlw	1
  1385  00732A  5805               	subwfb	ledBlink@d+1,w,c
  1386  00732C  B0D8               	btfsc	status,0,c
  1387  00732E  D003               	goto	u1700
  1388  007330                     l71:
  1389                           
  1390                           ;ledRGB.c: 171: {}
  1391  007330  4A04               	infsnz	ledBlink@d,f,c
  1392  007332  2A05               	incf	ledBlink@d+1,f,c
  1393  007334  D7F5               	goto	l1987
  1394  007336                     u1700:
  1395  007336  4A02               	infsnz	ledBlink@c,f,c
  1396  007338  2A03               	incf	ledBlink@c+1,f,c
  1397  00733A  D7E6               	goto	l1981
  1398  00733C                     u1710:
  1399                           
  1400                           ;ledRGB.c: 172: ledON();
  1401  00733C  EC99  F038         	call	_ledON	;wreg free
  1402  007340  0012               	return		;funcret
  1403  007342                     __end_of_ledBlink:
  1404                           	opt stack 0
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1l	equ	0xFE1
  1413                           indf2	equ	0xFDF
  1414                           fsr2h	equ	0xFDA
  1415                           fsr2l	equ	0xFD9
  1416                           status	equ	0xFD8
  1417                           
  1418 ;; *************** function _ledON *****************
  1419 ;; Defined at:
  1420 ;;		line 157 in file "ledRGB.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1434 ;;      Params:         0       0       0       0       0       0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1437 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    1
  1441 ;; This function calls:
  1442 ;;		_led_control
  1443 ;; This function is called by:
  1444 ;;		_ledBlink
  1445 ;;		_main
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text4
  1450  007132                     __ptext4:
  1451                           	opt stack 0
  1452  007132                     _ledON:
  1453                           	opt stack 29
  1454                           
  1455                           ;ledRGB.c: 158: led_control(color_pages_[index_color_]);
  1456                           
  1457                           ;incstack = 0
  1458  007132  0E4C               	movlw	low _color_pages_
  1459  007134  2458               	addwf	_index_color_,w,c
  1460  007136  6ED9               	movwf	fsr2l,c
  1461  007138  0E00               	movlw	high _color_pages_
  1462  00713A  2059               	addwfc	_index_color_+1,w,c
  1463  00713C  6EDA               	movwf	fsr2h,c
  1464  00713E  50DF               	movf	indf2,w,c
  1465  007140  EC19  F03A         	call	_led_control
  1466  007144  0012               	return		;funcret
  1467  007146                     __end_of_ledON:
  1468                           	opt stack 0
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           postinc0	equ	0xFEE
  1474                           wreg	equ	0xFE8
  1475                           postdec1	equ	0xFE5
  1476                           fsr1l	equ	0xFE1
  1477                           indf2	equ	0xFDF
  1478                           fsr2h	equ	0xFDA
  1479                           fsr2l	equ	0xFD9
  1480                           status	equ	0xFD8
  1481                           
  1482 ;; *************** function _ledOFF *****************
  1483 ;; Defined at:
  1484 ;;		line 161 in file "ledRGB.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;		None
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;		None
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      void 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2, status,0, cstack
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1498 ;;      Params:         0       0       0       0       0       0       0       0       0
  1499 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1501 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1502 ;;Total ram usage:        0 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:    1
  1505 ;; This function calls:
  1506 ;;		_led_control
  1507 ;; This function is called by:
  1508 ;;		_ledBlink
  1509 ;;		_main
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text5
  1514  007104                     __ptext5:
  1515                           	opt stack 0
  1516  007104                     _ledOFF:
  1517                           	opt stack 29
  1518                           
  1519                           ;ledRGB.c: 162: led_control(NONE);
  1520                           
  1521                           ;incstack = 0
  1522  007104  0E07               	movlw	7
  1523  007106  EC19  F03A         	call	_led_control
  1524  00710A  0012               	return		;funcret
  1525  00710C                     __end_of_ledOFF:
  1526                           	opt stack 0
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           postinc0	equ	0xFEE
  1532                           wreg	equ	0xFE8
  1533                           postdec1	equ	0xFE5
  1534                           fsr1l	equ	0xFE1
  1535                           indf2	equ	0xFDF
  1536                           fsr2h	equ	0xFDA
  1537                           fsr2l	equ	0xFD9
  1538                           status	equ	0xFD8
  1539                           
  1540 ;; *************** function _init_ledRGB *****************
  1541 ;; Defined at:
  1542 ;;		line 139 in file "ledRGB.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;		None
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;		None
  1547 ;; Return value:  Size  Location     Type
  1548 ;;                  1    wreg      void 
  1549 ;; Registers used:
  1550 ;;		wreg, status,2, status,0, cstack
  1551 ;; Tracked objects:
  1552 ;;		On entry : 0/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1556 ;;      Params:         0       0       0       0       0       0       0       0       0
  1557 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1558 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1559 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1560 ;;Total ram usage:        0 bytes
  1561 ;; Hardware stack levels used:    1
  1562 ;; Hardware stack levels required when called:    1
  1563 ;; This function calls:
  1564 ;;		_led_control
  1565 ;;		_pwm_config_
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text6
  1572  007122                     __ptext6:
  1573                           	opt stack 0
  1574  007122                     _init_ledRGB:
  1575                           	opt stack 29
  1576                           
  1577                           ;ledRGB.c: 140: pwm_config_();
  1578                           
  1579                           ;incstack = 0
  1580  007122  ECAE  F038         	call	_pwm_config_	;wreg free
  1581                           
  1582                           ;ledRGB.c: 141: CCPR1L = 199;
  1583  007126  0EC7               	movlw	199
  1584  007128  6EBE               	movwf	4030,c	;volatile
  1585                           
  1586                           ;ledRGB.c: 142: led_control(NONE);
  1587  00712A  0E07               	movlw	7
  1588  00712C  EC19  F03A         	call	_led_control
  1589  007130  0012               	return		;funcret
  1590  007132                     __end_of_init_ledRGB:
  1591                           	opt stack 0
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           postdec1	equ	0xFE5
  1599                           fsr1l	equ	0xFE1
  1600                           indf2	equ	0xFDF
  1601                           fsr2h	equ	0xFDA
  1602                           fsr2l	equ	0xFD9
  1603                           status	equ	0xFD8
  1604                           
  1605 ;; *************** function _pwm_config_ *****************
  1606 ;; Defined at:
  1607 ;;		line 123 in file "ledRGB.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;		None
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg, status,2
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1621 ;;      Params:         0       0       0       0       0       0       0       0       0
  1622 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1623 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1624 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1625 ;;Total ram usage:        0 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_init_ledRGB
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text7
  1635  00715C                     __ptext7:
  1636                           	opt stack 0
  1637  00715C                     _pwm_config_:
  1638                           	opt stack 29
  1639                           
  1640                           ;ledRGB.c: 124: TRISC2 = 0;
  1641                           
  1642                           ;incstack = 0
  1643  00715C  9494               	bcf	3988,2,c	;volatile
  1644                           
  1645                           ;ledRGB.c: 125: PR2 = 199;
  1646  00715E  0EC7               	movlw	199
  1647  007160  6ECB               	movwf	4043,c	;volatile
  1648                           
  1649                           ;ledRGB.c: 127: TRISCbits.TRISC2=0;
  1650  007162  9494               	bcf	3988,2,c	;volatile
  1651                           
  1652                           ;ledRGB.c: 128: PR2=199;
  1653  007164  0EC7               	movlw	199
  1654  007166  6ECB               	movwf	4043,c	;volatile
  1655                           
  1656                           ;ledRGB.c: 129: CCPR1L=1;
  1657  007168  0E01               	movlw	1
  1658  00716A  6EBE               	movwf	4030,c	;volatile
  1659                           
  1660                           ;ledRGB.c: 130: T2CON=0;
  1661  00716C  0E00               	movlw	0
  1662  00716E  6ECA               	movwf	4042,c	;volatile
  1663                           
  1664                           ;ledRGB.c: 131: CCP1CON=0x0C;
  1665  007170  0E0C               	movlw	12
  1666  007172  6EBD               	movwf	4029,c	;volatile
  1667                           
  1668                           ;ledRGB.c: 132: TMR2=0;
  1669  007174  0E00               	movlw	0
  1670  007176  6ECC               	movwf	4044,c	;volatile
  1671                           
  1672                           ;ledRGB.c: 133: T2CONbits.TMR2ON=1;
  1673  007178  84CA               	bsf	4042,2,c	;volatile
  1674  00717A  0012               	return		;funcret
  1675  00717C                     __end_of_pwm_config_:
  1676                           	opt stack 0
  1677                           tblptru	equ	0xFF8
  1678                           tblptrh	equ	0xFF7
  1679                           tblptrl	equ	0xFF6
  1680                           tablat	equ	0xFF5
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           postdec1	equ	0xFE5
  1684                           fsr1l	equ	0xFE1
  1685                           indf2	equ	0xFDF
  1686                           fsr2h	equ	0xFDA
  1687                           fsr2l	equ	0xFD9
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _led_control *****************
  1691 ;; Defined at:
  1692 ;;		line 25 in file "ledRGB.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;  ledCor          1    wreg     enum E3878
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;  ledCor          1    0[COMRAM] enum E3878
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1706 ;;      Params:         0       0       0       0       0       0       0       0       0
  1707 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1708 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1709 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1710 ;;Total ram usage:        1 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; This function calls:
  1713 ;;		Nothing
  1714 ;; This function is called by:
  1715 ;;		_init_ledRGB
  1716 ;;		_nextPage
  1717 ;;		_prevPage
  1718 ;;		_ledON
  1719 ;;		_ledOFF
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text8
  1724  007432                     __ptext8:
  1725                           	opt stack 0
  1726  007432                     _led_control:
  1727                           	opt stack 29
  1728                           
  1729                           ;incstack = 0
  1730                           ;led_control@ledCor stored from wreg
  1731  007432  6E01               	movwf	led_control@ledCor,c
  1732                           
  1733                           ;ledRGB.c: 26: switch(ledCor){
  1734  007434  D020               	goto	l29
  1735  007436                     l30:
  1736                           
  1737                           ;ledRGB.c: 28: LATAbits.LATA1 = 1;
  1738  007436  8289               	bsf	3977,1,c	;volatile
  1739                           
  1740                           ;ledRGB.c: 29: LATAbits.LATA0 = 0;
  1741  007438  9089               	bcf	3977,0,c	;volatile
  1742                           
  1743                           ;ledRGB.c: 30: LATAbits.LATA2 = 0;
  1744  00743A  9489               	bcf	3977,2,c	;volatile
  1745                           
  1746                           ;ledRGB.c: 31: break;
  1747  00743C  0012               	return	
  1748  00743E                     l32:
  1749                           
  1750                           ;ledRGB.c: 33: LATAbits.LATA1 = 0;
  1751  00743E  9289               	bcf	3977,1,c	;volatile
  1752                           
  1753                           ;ledRGB.c: 34: LATAbits.LATA0 = 1;
  1754  007440  8089               	bsf	3977,0,c	;volatile
  1755                           
  1756                           ;ledRGB.c: 35: LATAbits.LATA2 = 0;
  1757  007442  9489               	bcf	3977,2,c	;volatile
  1758                           
  1759                           ;ledRGB.c: 36: break;
  1760  007444  0012               	return	
  1761  007446                     l33:
  1762                           
  1763                           ;ledRGB.c: 38: LATAbits.LATA1 = 0;
  1764  007446  9289               	bcf	3977,1,c	;volatile
  1765                           
  1766                           ;ledRGB.c: 39: LATAbits.LATA0 = 0;
  1767  007448  9089               	bcf	3977,0,c	;volatile
  1768                           
  1769                           ;ledRGB.c: 40: LATAbits.LATA2 = 1;
  1770  00744A  8489               	bsf	3977,2,c	;volatile
  1771                           
  1772                           ;ledRGB.c: 41: break;
  1773  00744C  0012               	return	
  1774  00744E                     l34:
  1775                           
  1776                           ;ledRGB.c: 43: LATAbits.LATA1 = 0;
  1777  00744E  9289               	bcf	3977,1,c	;volatile
  1778                           
  1779                           ;ledRGB.c: 44: LATAbits.LATA0 = 1;
  1780  007450  8089               	bsf	3977,0,c	;volatile
  1781                           
  1782                           ;ledRGB.c: 45: LATAbits.LATA2 = 1;
  1783  007452  8489               	bsf	3977,2,c	;volatile
  1784                           
  1785                           ;ledRGB.c: 46: break;
  1786  007454  0012               	return	
  1787  007456                     l35:
  1788                           
  1789                           ;ledRGB.c: 48: LATAbits.LATA1 = 1;
  1790  007456  8289               	bsf	3977,1,c	;volatile
  1791                           
  1792                           ;ledRGB.c: 49: LATAbits.LATA0 = 0;
  1793  007458  9089               	bcf	3977,0,c	;volatile
  1794                           
  1795                           ;ledRGB.c: 50: LATAbits.LATA2 = 1;
  1796  00745A  8489               	bsf	3977,2,c	;volatile
  1797                           
  1798                           ;ledRGB.c: 51: break;
  1799  00745C  0012               	return	
  1800  00745E                     l36:
  1801                           
  1802                           ;ledRGB.c: 53: LATAbits.LATA1 = 1;
  1803  00745E  8289               	bsf	3977,1,c	;volatile
  1804                           
  1805                           ;ledRGB.c: 54: LATAbits.LATA0 = 1;
  1806  007460  8089               	bsf	3977,0,c	;volatile
  1807                           
  1808                           ;ledRGB.c: 55: LATAbits.LATA2 = 0;
  1809  007462  9489               	bcf	3977,2,c	;volatile
  1810                           
  1811                           ;ledRGB.c: 56: break;
  1812  007464  0012               	return	
  1813  007466                     l37:
  1814                           
  1815                           ;ledRGB.c: 58: LATAbits.LATA1 = 1;
  1816  007466  8289               	bsf	3977,1,c	;volatile
  1817                           
  1818                           ;ledRGB.c: 59: LATAbits.LATA0 = 1;
  1819  007468  8089               	bsf	3977,0,c	;volatile
  1820                           
  1821                           ;ledRGB.c: 60: LATAbits.LATA2 = 1;
  1822  00746A  8489               	bsf	3977,2,c	;volatile
  1823                           
  1824                           ;ledRGB.c: 61: break;
  1825  00746C  0012               	return	
  1826  00746E                     l38:
  1827                           
  1828                           ;ledRGB.c: 63: LATAbits.LATA1 = 0;
  1829  00746E  9289               	bcf	3977,1,c	;volatile
  1830                           
  1831                           ;ledRGB.c: 64: LATAbits.LATA0 = 0;
  1832  007470  9089               	bcf	3977,0,c	;volatile
  1833                           
  1834                           ;ledRGB.c: 65: LATAbits.LATA2 = 0;
  1835  007472  9489               	bcf	3977,2,c	;volatile
  1836                           
  1837                           ;ledRGB.c: 69: }
  1838                           
  1839                           ;ledRGB.c: 68: break;
  1840                           
  1841                           ;ledRGB.c: 67: default:
  1842                           
  1843                           ;ledRGB.c: 66: break;
  1844  007474  0012               	return	
  1845  007476                     l29:
  1846  007476  5001               	movf	led_control@ledCor,w,c
  1847                           
  1848                           ; Switch size 1, requested type "space"
  1849                           ; Number of cases is 8, Range of values is 0 to 7
  1850                           ; switch strategies available:
  1851                           ; Name         Instructions Cycles
  1852                           ; simple_byte           25    13 (average)
  1853                           ;	Chosen strategy is simple_byte
  1854  007478  0A00               	xorlw	0	; case 0
  1855  00747A  B4D8               	btfsc	status,2,c
  1856  00747C  D7E4               	goto	l33
  1857  00747E  0A01               	xorlw	1	; case 1
  1858  007480  B4D8               	btfsc	status,2,c
  1859  007482  D7D9               	goto	l30
  1860  007484  0A03               	xorlw	3	; case 2
  1861  007486  B4D8               	btfsc	status,2,c
  1862  007488  D7DA               	goto	l32
  1863  00748A  0A01               	xorlw	1	; case 3
  1864  00748C  B4D8               	btfsc	status,2,c
  1865  00748E  D7DF               	goto	l34
  1866  007490  0A07               	xorlw	7	; case 4
  1867  007492  B4D8               	btfsc	status,2,c
  1868  007494  D7E0               	goto	l35
  1869  007496  0A01               	xorlw	1	; case 5
  1870  007498  B4D8               	btfsc	status,2,c
  1871  00749A  D7E1               	goto	l36
  1872  00749C  0A03               	xorlw	3	; case 6
  1873  00749E  B4D8               	btfsc	status,2,c
  1874  0074A0  D7E2               	goto	l37
  1875  0074A2  0A01               	xorlw	1	; case 7
  1876  0074A4  A4D8               	btfss	status,2,c
  1877  0074A6  0012               	return	
  1878  0074A8  D7E2               	goto	l38
  1879  0074AA                     __end_of_led_control:
  1880                           	opt stack 0
  1881                           tblptru	equ	0xFF8
  1882                           tblptrh	equ	0xFF7
  1883                           tblptrl	equ	0xFF6
  1884                           tablat	equ	0xFF5
  1885                           postinc0	equ	0xFEE
  1886                           wreg	equ	0xFE8
  1887                           postdec1	equ	0xFE5
  1888                           fsr1l	equ	0xFE1
  1889                           indf2	equ	0xFDF
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _init_XZ_Gesture *****************
  1895 ;; Defined at:
  1896 ;;		line 69 in file "ZXgesture-library.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  2  101[None  ] int 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1910 ;;      Params:         0       0       0       0       0       0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1913 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    1
  1917 ;; This function calls:
  1918 ;;		_UART_Init
  1919 ;; This function is called by:
  1920 ;;		_main
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           	psect	text9
  1925  0070DE                     __ptext9:
  1926                           	opt stack 0
  1927  0070DE                     _init_XZ_Gesture:
  1928                           	opt stack 29
  1929                           
  1930                           ;ZXgesture-library.c: 70: UART_Init();
  1931                           
  1932                           ;incstack = 0
  1933  0070DE  ECA3  F038         	call	_UART_Init	;wreg free
  1934  0070E2  0012               	return	
  1935  0070E4                     __end_of_init_XZ_Gesture:
  1936                           	opt stack 0
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           postdec1	equ	0xFE5
  1944                           fsr1l	equ	0xFE1
  1945                           indf2	equ	0xFDF
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _UART_Init *****************
  1951 ;; Defined at:
  1952 ;;		line 39 in file "ZXgesture-library.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;		None
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;		None
  1957 ;; Return value:  Size  Location     Type
  1958 ;;                  1    wreg      void 
  1959 ;; Registers used:
  1960 ;;		wreg, status,2
  1961 ;; Tracked objects:
  1962 ;;		On entry : 0/0
  1963 ;;		On exit  : 0/0
  1964 ;;		Unchanged: 0/0
  1965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1966 ;;      Params:         0       0       0       0       0       0       0       0       0
  1967 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1968 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1969 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1970 ;;Total ram usage:        0 bytes
  1971 ;; Hardware stack levels used:    1
  1972 ;; This function calls:
  1973 ;;		Nothing
  1974 ;; This function is called by:
  1975 ;;		_init_XZ_Gesture
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text10
  1980  007146                     __ptext10:
  1981                           	opt stack 0
  1982  007146                     _UART_Init:
  1983                           	opt stack 29
  1984                           
  1985                           ;ZXgesture-library.c: 41: BRGH = 0;
  1986                           
  1987                           ;incstack = 0
  1988  007146  94AC               	bcf	4012,2,c	;volatile
  1989                           
  1990                           ;ZXgesture-library.c: 42: BRG16 = 1;
  1991  007148  86B8               	bsf	4024,3,c	;volatile
  1992                           
  1993                           ;ZXgesture-library.c: 43: SYNC = 0;
  1994  00714A  98AC               	bcf	4012,4,c	;volatile
  1995                           
  1996                           ;ZXgesture-library.c: 44: SPBRG = 10;
  1997  00714C  0E0A               	movlw	10
  1998  00714E  6EAF               	movwf	4015,c	;volatile
  1999                           
  2000                           ;ZXgesture-library.c: 45: SPEN = 1;
  2001  007150  8EAB               	bsf	4011,7,c	;volatile
  2002                           
  2003                           ;ZXgesture-library.c: 46: CREN = 1;
  2004  007152  88AB               	bsf	4011,4,c	;volatile
  2005                           
  2006                           ;ZXgesture-library.c: 47: TXEN = 1;
  2007  007154  8AAC               	bsf	4012,5,c	;volatile
  2008                           
  2009                           ;ZXgesture-library.c: 48: TRISC7 = 1;
  2010  007156  8E94               	bsf	3988,7,c	;volatile
  2011                           
  2012                           ;ZXgesture-library.c: 49: TRISC6 = 0;
  2013  007158  9C94               	bcf	3988,6,c	;volatile
  2014  00715A  0012               	return		;funcret
  2015  00715C                     __end_of_UART_Init:
  2016                           	opt stack 0
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           postinc0	equ	0xFEE
  2022                           wreg	equ	0xFE8
  2023                           postdec1	equ	0xFE5
  2024                           fsr1l	equ	0xFE1
  2025                           indf2	equ	0xFDF
  2026                           fsr2h	equ	0xFDA
  2027                           fsr2l	equ	0xFD9
  2028                           status	equ	0xFD8
  2029                           
  2030 ;; *************** function _increasePWM *****************
  2031 ;; Defined at:
  2032 ;;		line 175 in file "ledRGB.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;		None
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  val             2   71[COMRAM] int 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2046 ;;      Params:         0       0       0       0       0       0       0       0       0
  2047 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2049 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2050 ;;Total ram usage:        7 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    3
  2053 ;; This function calls:
  2054 ;;		___awdiv
  2055 ;;		___awtoft
  2056 ;;		___ftadd
  2057 ;;		___ftneg
  2058 ;;		___fttol
  2059 ;;		___wmul
  2060 ;;		_ceil
  2061 ;; This function is called by:
  2062 ;;		_main
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text11
  2067  007738                     __ptext11:
  2068                           	opt stack 0
  2069  007738                     _increasePWM:
  2070                           	opt stack 27
  2071                           
  2072                           ;ledRGB.c: 176: _pwm_count = _pwm_count < 1 ? _pwm_count : _pwm_count-1;
  2073                           
  2074                           ;incstack = 0
  2075  007738  BE5C               	btfsc	__pwm_count+1,7,c
  2076  00773A  D00B               	goto	l77
  2077  00773C  505C               	movf	__pwm_count+1,w,c
  2078  00773E  E103               	bnz	u1720
  2079  007740  045B               	decf	__pwm_count,w,c
  2080  007742  A0D8               	btfss	status,0,c
  2081  007744  D006               	goto	l77
  2082  007746                     u1720:
  2083  007746  0EFF               	movlw	255
  2084  007748  245B               	addwf	__pwm_count,w,c
  2085  00774A  6E5B               	movwf	__pwm_count,c
  2086  00774C  0EFF               	movlw	255
  2087  00774E  205C               	addwfc	__pwm_count+1,w,c
  2088  007750  6E5C               	movwf	__pwm_count+1,c
  2089  007752                     l77:
  2090                           
  2091                           ;ledRGB.c: 177: int val = 199 - ceil((199 - 5)*_pwm_count/3);
  2092  007752  0E00               	movlw	0
  2093  007754  6E0A               	movwf	___awdiv@divisor+1,c
  2094  007756  0E03               	movlw	3
  2095  007758  6E09               	movwf	___awdiv@divisor,c
  2096  00775A  C05B  F001         	movff	__pwm_count,___wmul@multiplier
  2097  00775E  C05C  F002         	movff	__pwm_count+1,___wmul@multiplier+1
  2098  007762  0E00               	movlw	0
  2099  007764  6E04               	movwf	___wmul@multiplicand+1,c
  2100  007766  0EC2               	movlw	194
  2101  007768  6E03               	movwf	___wmul@multiplicand,c
  2102  00776A  ECD0  F038         	call	___wmul	;wreg free
  2103  00776E  C001  F007         	movff	?___wmul,___awdiv@dividend
  2104  007772  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2105  007776  EC55  F03A         	call	___awdiv	;wreg free
  2106  00777A  C007  F00F         	movff	?___awdiv,___awtoft@c
  2107  00777E  C008  F010         	movff	?___awdiv+1,___awtoft@c+1
  2108  007782  EC29  F039         	call	___awtoft	;wreg free
  2109  007786  C00F  F038         	movff	?___awtoft,ceil@x
  2110  00778A  C010  F039         	movff	?___awtoft+1,ceil@x+1
  2111  00778E  C011  F03A         	movff	?___awtoft+2,ceil@x+2
  2112  007792  EC81  F03C         	call	_ceil	;wreg free
  2113  007796  C038  F040         	movff	?_ceil,___ftneg@f1
  2114  00779A  C039  F041         	movff	?_ceil+1,___ftneg@f1+1
  2115  00779E  C03A  F042         	movff	?_ceil+2,___ftneg@f1+2
  2116  0077A2  ECBE  F038         	call	___ftneg	;wreg free
  2117  0077A6  C040  F043         	movff	?___ftneg,_increasePWM$915
  2118  0077AA  C041  F044         	movff	?___ftneg+1,_increasePWM$915+1
  2119  0077AE  C042  F045         	movff	?___ftneg+2,_increasePWM$915+2
  2120                           
  2121                           ;ledRGB.c: 177: int val = 199 - ceil((199 - 5)*_pwm_count/3);
  2122  0077B2  0E00               	movlw	0
  2123  0077B4  6E16               	movwf	___ftadd@f2,c
  2124  0077B6  0E47               	movlw	71
  2125  0077B8  6E17               	movwf	___ftadd@f2+1,c
  2126  0077BA  0E43               	movlw	67
  2127  0077BC  6E18               	movwf	___ftadd@f2+2,c
  2128  0077BE  C043  F013         	movff	_increasePWM$915,___ftadd@f1
  2129  0077C2  C044  F014         	movff	_increasePWM$915+1,___ftadd@f1+1
  2130  0077C6  C045  F015         	movff	_increasePWM$915+2,___ftadd@f1+2
  2131  0077CA  ECFD  F03C         	call	___ftadd	;wreg free
  2132  0077CE  C013  F01F         	movff	?___ftadd,___fttol@f1
  2133  0077D2  C014  F020         	movff	?___ftadd+1,___fttol@f1+1
  2134  0077D6  C015  F021         	movff	?___ftadd+2,___fttol@f1+2
  2135  0077DA  EC07  F03C         	call	___fttol	;wreg free
  2136  0077DE  C01F  F048         	movff	?___fttol,increasePWM@val
  2137  0077E2  C020  F049         	movff	?___fttol+1,increasePWM@val+1
  2138                           
  2139                           ;ledRGB.c: 178: CCPR1L = val > 199 ? 199 : val;
  2140  0077E6  BE49               	btfsc	increasePWM@val+1,7,c
  2141  0077E8  D006               	goto	u1730
  2142  0077EA  5049               	movf	increasePWM@val+1,w,c
  2143  0077EC  E109               	bnz	l2013
  2144  0077EE  0EC8               	movlw	200
  2145  0077F0  5C48               	subwf	increasePWM@val,w,c
  2146  0077F2  B0D8               	btfsc	status,0,c
  2147  0077F4  D005               	goto	l81
  2148  0077F6                     u1730:
  2149  0077F6  C048  F046         	movff	increasePWM@val,_increasePWM$186
  2150  0077FA  C049  F047         	movff	increasePWM@val+1,_increasePWM$186+1
  2151  0077FE  D004               	goto	l83
  2152  007800                     l81:
  2153  007800                     l2013:
  2154  007800  0E00               	movlw	0
  2155  007802  6E47               	movwf	_increasePWM$186+1,c
  2156  007804  0EC7               	movlw	199
  2157  007806  6E46               	movwf	_increasePWM$186,c
  2158  007808                     l83:
  2159  007808  C046  FFBE         	movff	_increasePWM$186,4030	;volatile
  2160  00780C  0012               	return		;funcret
  2161  00780E                     __end_of_increasePWM:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           postdec1	equ	0xFE5
  2170                           fsr1l	equ	0xFE1
  2171                           indf2	equ	0xFDF
  2172                           fsr2h	equ	0xFDA
  2173                           fsr2l	equ	0xFD9
  2174                           status	equ	0xFD8
  2175                           
  2176 ;; *************** function _getLastZ *****************
  2177 ;; Defined at:
  2178 ;;		line 132 in file "ZXgesture-library.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;		None
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;		None
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  2    0[COMRAM] int 
  2185 ;; Registers used:
  2186 ;;		None
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2192 ;;      Params:         2       0       0       0       0       0       0       0       0
  2193 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2195 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2196 ;;Total ram usage:        2 bytes
  2197 ;; Hardware stack levels used:    1
  2198 ;; This function calls:
  2199 ;;		Nothing
  2200 ;; This function is called by:
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text12
  2206  0070FC                     __ptext12:
  2207                           	opt stack 0
  2208  0070FC                     _getLastZ:
  2209                           	opt stack 30
  2210                           
  2211                           ;ZXgesture-library.c: 133: return _last_z;
  2212                           
  2213                           ;incstack = 0
  2214  0070FC  C054  F001         	movff	__last_z,?_getLastZ
  2215  007100  6A02               	clrf	?_getLastZ+1,c
  2216  007102  0012               	return		;funcret
  2217  007104                     __end_of_getLastZ:
  2218                           	opt stack 0
  2219                           tblptru	equ	0xFF8
  2220                           tblptrh	equ	0xFF7
  2221                           tblptrl	equ	0xFF6
  2222                           tablat	equ	0xFF5
  2223                           postinc0	equ	0xFEE
  2224                           wreg	equ	0xFE8
  2225                           postdec1	equ	0xFE5
  2226                           fsr1l	equ	0xFE1
  2227                           indf2	equ	0xFDF
  2228                           fsr2h	equ	0xFDA
  2229                           fsr2l	equ	0xFD9
  2230                           status	equ	0xFD8
  2231                           
  2232 ;; *************** function _getLastX *****************
  2233 ;; Defined at:
  2234 ;;		line 128 in file "ZXgesture-library.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;		None
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;		None
  2239 ;; Return value:  Size  Location     Type
  2240 ;;                  2    0[COMRAM] int 
  2241 ;; Registers used:
  2242 ;;		None
  2243 ;; Tracked objects:
  2244 ;;		On entry : 0/0
  2245 ;;		On exit  : 0/0
  2246 ;;		Unchanged: 0/0
  2247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2248 ;;      Params:         2       0       0       0       0       0       0       0       0
  2249 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2250 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2251 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2252 ;;Total ram usage:        2 bytes
  2253 ;; Hardware stack levels used:    1
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_main
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text13
  2262  0070F4                     __ptext13:
  2263                           	opt stack 0
  2264  0070F4                     _getLastX:
  2265                           	opt stack 30
  2266                           
  2267                           ;ZXgesture-library.c: 129: return _last_x;
  2268                           
  2269                           ;incstack = 0
  2270  0070F4  C055  F001         	movff	__last_x,?_getLastX
  2271  0070F8  6A02               	clrf	?_getLastX+1,c
  2272  0070FA  0012               	return		;funcret
  2273  0070FC                     __end_of_getLastX:
  2274                           	opt stack 0
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           postinc0	equ	0xFEE
  2280                           wreg	equ	0xFE8
  2281                           postdec1	equ	0xFE5
  2282                           fsr1l	equ	0xFE1
  2283                           indf2	equ	0xFDF
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _decreasePWM *****************
  2289 ;; Defined at:
  2290 ;;		line 181 in file "ledRGB.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  val             2   71[COMRAM] int 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2304 ;;      Params:         0       0       0       0       0       0       0       0       0
  2305 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2306 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2307 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2308 ;;Total ram usage:        7 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    3
  2311 ;; This function calls:
  2312 ;;		___awdiv
  2313 ;;		___awtoft
  2314 ;;		___ftadd
  2315 ;;		___ftneg
  2316 ;;		___fttol
  2317 ;;		___wmul
  2318 ;;		_ceil
  2319 ;; This function is called by:
  2320 ;;		_main
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text14
  2325  00766C                     __ptext14:
  2326                           	opt stack 0
  2327  00766C                     _decreasePWM:
  2328                           	opt stack 27
  2329                           
  2330                           ;ledRGB.c: 182: _pwm_count = _pwm_count > 2 ? _pwm_count : _pwm_count+1;
  2331                           
  2332                           ;incstack = 0
  2333  00766C  BE5C               	btfsc	__pwm_count+1,7,c
  2334  00766E  D006               	goto	u1740
  2335  007670  505C               	movf	__pwm_count+1,w,c
  2336  007672  E10A               	bnz	l2021
  2337  007674  0E03               	movlw	3
  2338  007676  5C5B               	subwf	__pwm_count,w,c
  2339  007678  B0D8               	btfsc	status,0,c
  2340  00767A  D006               	goto	l88
  2341  00767C                     u1740:
  2342  00767C  0E01               	movlw	1
  2343  00767E  245B               	addwf	__pwm_count,w,c
  2344  007680  6E5B               	movwf	__pwm_count,c
  2345  007682  0E00               	movlw	0
  2346  007684  205C               	addwfc	__pwm_count+1,w,c
  2347  007686  6E5C               	movwf	__pwm_count+1,c
  2348  007688                     l88:
  2349  007688                     l2021:
  2350                           
  2351                           ;ledRGB.c: 183: int val = 199 - ceil((199 - 5)*_pwm_count/3);
  2352  007688  0E00               	movlw	0
  2353  00768A  6E0A               	movwf	___awdiv@divisor+1,c
  2354  00768C  0E03               	movlw	3
  2355  00768E  6E09               	movwf	___awdiv@divisor,c
  2356  007690  C05B  F001         	movff	__pwm_count,___wmul@multiplier
  2357  007694  C05C  F002         	movff	__pwm_count+1,___wmul@multiplier+1
  2358  007698  0E00               	movlw	0
  2359  00769A  6E04               	movwf	___wmul@multiplicand+1,c
  2360  00769C  0EC2               	movlw	194
  2361  00769E  6E03               	movwf	___wmul@multiplicand,c
  2362  0076A0  ECD0  F038         	call	___wmul	;wreg free
  2363  0076A4  C001  F007         	movff	?___wmul,___awdiv@dividend
  2364  0076A8  C002  F008         	movff	?___wmul+1,___awdiv@dividend+1
  2365  0076AC  EC55  F03A         	call	___awdiv	;wreg free
  2366  0076B0  C007  F00F         	movff	?___awdiv,___awtoft@c
  2367  0076B4  C008  F010         	movff	?___awdiv+1,___awtoft@c+1
  2368  0076B8  EC29  F039         	call	___awtoft	;wreg free
  2369  0076BC  C00F  F038         	movff	?___awtoft,ceil@x
  2370  0076C0  C010  F039         	movff	?___awtoft+1,ceil@x+1
  2371  0076C4  C011  F03A         	movff	?___awtoft+2,ceil@x+2
  2372  0076C8  EC81  F03C         	call	_ceil	;wreg free
  2373  0076CC  C038  F040         	movff	?_ceil,___ftneg@f1
  2374  0076D0  C039  F041         	movff	?_ceil+1,___ftneg@f1+1
  2375  0076D4  C03A  F042         	movff	?_ceil+2,___ftneg@f1+2
  2376  0076D8  ECBE  F038         	call	___ftneg	;wreg free
  2377  0076DC  C040  F043         	movff	?___ftneg,_decreasePWM$916
  2378  0076E0  C041  F044         	movff	?___ftneg+1,_decreasePWM$916+1
  2379  0076E4  C042  F045         	movff	?___ftneg+2,_decreasePWM$916+2
  2380                           
  2381                           ;ledRGB.c: 183: int val = 199 - ceil((199 - 5)*_pwm_count/3);
  2382  0076E8  0E00               	movlw	0
  2383  0076EA  6E16               	movwf	___ftadd@f2,c
  2384  0076EC  0E47               	movlw	71
  2385  0076EE  6E17               	movwf	___ftadd@f2+1,c
  2386  0076F0  0E43               	movlw	67
  2387  0076F2  6E18               	movwf	___ftadd@f2+2,c
  2388  0076F4  C043  F013         	movff	_decreasePWM$916,___ftadd@f1
  2389  0076F8  C044  F014         	movff	_decreasePWM$916+1,___ftadd@f1+1
  2390  0076FC  C045  F015         	movff	_decreasePWM$916+2,___ftadd@f1+2
  2391  007700  ECFD  F03C         	call	___ftadd	;wreg free
  2392  007704  C013  F01F         	movff	?___ftadd,___fttol@f1
  2393  007708  C014  F020         	movff	?___ftadd+1,___fttol@f1+1
  2394  00770C  C015  F021         	movff	?___ftadd+2,___fttol@f1+2
  2395  007710  EC07  F03C         	call	___fttol	;wreg free
  2396  007714  C01F  F048         	movff	?___fttol,decreasePWM@val
  2397  007718  C020  F049         	movff	?___fttol+1,decreasePWM@val+1
  2398                           
  2399                           ;ledRGB.c: 184: CCPR1L = val < 0 ? 0 : val;
  2400  00771C  BE49               	btfsc	decreasePWM@val+1,7,c
  2401  00771E  D005               	goto	l92
  2402  007720  C048  F046         	movff	decreasePWM@val,_decreasePWM$189
  2403  007724  C049  F047         	movff	decreasePWM@val+1,_decreasePWM$189+1
  2404  007728  D004               	goto	l94
  2405  00772A                     l92:
  2406  00772A  0E00               	movlw	0
  2407  00772C  6E47               	movwf	_decreasePWM$189+1,c
  2408  00772E  0E00               	movlw	0
  2409  007730  6E46               	movwf	_decreasePWM$189,c
  2410  007732                     l94:
  2411  007732  C046  FFBE         	movff	_decreasePWM$189,4030	;volatile
  2412  007736  0012               	return		;funcret
  2413  007738                     __end_of_decreasePWM:
  2414                           	opt stack 0
  2415                           tblptru	equ	0xFF8
  2416                           tblptrh	equ	0xFF7
  2417                           tblptrl	equ	0xFF6
  2418                           tablat	equ	0xFF5
  2419                           postinc0	equ	0xFEE
  2420                           wreg	equ	0xFE8
  2421                           postdec1	equ	0xFE5
  2422                           fsr1l	equ	0xFE1
  2423                           indf2	equ	0xFDF
  2424                           fsr2h	equ	0xFDA
  2425                           fsr2l	equ	0xFD9
  2426                           status	equ	0xFD8
  2427                           
  2428 ;; *************** function _ceil *****************
  2429 ;; Defined at:
  2430 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ceil.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  x               3   55[COMRAM] void 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  i               3   58[COMRAM] void 
  2435 ;;  expon           2   61[COMRAM] int 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  3   55[COMRAM] int 
  2438 ;; Registers used:
  2439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2445 ;;      Params:         3       0       0       0       0       0       0       0       0
  2446 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2448 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2449 ;;Total ram usage:        8 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    2
  2452 ;; This function calls:
  2453 ;;		___altoft
  2454 ;;		___ftadd
  2455 ;;		___ftge
  2456 ;;		___fttol
  2457 ;;		_frexp
  2458 ;; This function is called by:
  2459 ;;		_increasePWM
  2460 ;;		_decreasePWM
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text15
  2465  007902                     __ptext15:
  2466                           	opt stack 0
  2467  007902                     _ceil:
  2468                           	opt stack 27
  2469                           
  2470                           ;incstack = 0
  2471  007902  C038  F001         	movff	ceil@x,frexp@value
  2472  007906  C039  F002         	movff	ceil@x+1,frexp@value+1
  2473  00790A  C03A  F003         	movff	ceil@x+2,frexp@value+2
  2474  00790E  0E3E               	movlw	low ceil@expon
  2475  007910  6E04               	movwf	frexp@eptr,c
  2476  007912  0E00               	movlw	high ceil@expon
  2477  007914  6E05               	movwf	frexp@eptr+1,c
  2478  007916  ECDD  F039         	call	_frexp	;wreg free
  2479  00791A  AE3F               	btfss	ceil@expon+1,7,c
  2480  00791C  D01D               	goto	l500
  2481  00791E  0E00               	movlw	0
  2482  007920  6E01               	movwf	___ftge@ff1,c
  2483  007922  0E00               	movlw	0
  2484  007924  6E02               	movwf	___ftge@ff1+1,c
  2485  007926  0E00               	movlw	0
  2486  007928  6E03               	movwf	___ftge@ff1+2,c
  2487  00792A  C038  F004         	movff	ceil@x,___ftge@ff2
  2488  00792E  C039  F005         	movff	ceil@x+1,___ftge@ff2+1
  2489  007932  C03A  F006         	movff	ceil@x+2,___ftge@ff2+2
  2490  007936  EC97  F03A         	call	___ftge	;wreg free
  2491  00793A  A0D8               	btfss	status,0,c
  2492  00793C  D006               	goto	l498
  2493  00793E  0E00               	movlw	0
  2494  007940  6E38               	movwf	?_ceil,c
  2495  007942  0E00               	movlw	0
  2496  007944  6E39               	movwf	?_ceil+1,c
  2497  007946  0E00               	movlw	0
  2498  007948  D005               	goto	L2
  2499  00794A                     l498:
  2500  00794A  0E00               	movlw	0
  2501  00794C  6E38               	movwf	?_ceil,c
  2502  00794E  0E80               	movlw	128
  2503  007950  6E39               	movwf	?_ceil+1,c
  2504  007952  0E3F               	movlw	63
  2505  007954                     L2:
  2506  007954  6E3A               	movwf	?_ceil+2,c
  2507  007956  0012               	return	
  2508  007958                     l500:
  2509  007958  503F               	movf	ceil@expon+1,w,c
  2510  00795A  E104               	bnz	u1550
  2511  00795C  0E15               	movlw	21
  2512  00795E  5C3E               	subwf	ceil@expon,w,c
  2513  007960  A0D8               	btfss	status,0,c
  2514  007962  D007               	goto	l501
  2515  007964                     u1550:
  2516  007964  C038  F038         	movff	ceil@x,?_ceil
  2517  007968  C039  F039         	movff	ceil@x+1,?_ceil+1
  2518  00796C  C03A  F03A         	movff	ceil@x+2,?_ceil+2
  2519  007970  0012               	return	
  2520  007972                     l501:
  2521  007972  C038  F01F         	movff	ceil@x,___fttol@f1
  2522  007976  C039  F020         	movff	ceil@x+1,___fttol@f1+1
  2523  00797A  C03A  F021         	movff	ceil@x+2,___fttol@f1+2
  2524  00797E  EC07  F03C         	call	___fttol	;wreg free
  2525  007982  C01F  F02E         	movff	?___fttol,___altoft@c
  2526  007986  C020  F02F         	movff	?___fttol+1,___altoft@c+1
  2527  00798A  C021  F030         	movff	?___fttol+2,___altoft@c+2
  2528  00798E  C022  F031         	movff	?___fttol+3,___altoft@c+3
  2529  007992  ECA1  F039         	call	___altoft	;wreg free
  2530  007996  C02E  F03B         	movff	?___altoft,ceil@i
  2531  00799A  C02F  F03C         	movff	?___altoft+1,ceil@i+1
  2532  00799E  C030  F03D         	movff	?___altoft+2,ceil@i+2
  2533  0079A2  C03B  F001         	movff	ceil@i,___ftge@ff1
  2534  0079A6  C03C  F002         	movff	ceil@i+1,___ftge@ff1+1
  2535  0079AA  C03D  F003         	movff	ceil@i+2,___ftge@ff1+2
  2536  0079AE  C038  F004         	movff	ceil@x,___ftge@ff2
  2537  0079B2  C039  F005         	movff	ceil@x+1,___ftge@ff2+1
  2538  0079B6  C03A  F006         	movff	ceil@x+2,___ftge@ff2+2
  2539  0079BA  EC97  F03A         	call	___ftge	;wreg free
  2540  0079BE  B0D8               	btfsc	status,0,c
  2541  0079C0  D015               	goto	l502
  2542  0079C2  C03B  F013         	movff	ceil@i,___ftadd@f1
  2543  0079C6  C03C  F014         	movff	ceil@i+1,___ftadd@f1+1
  2544  0079CA  C03D  F015         	movff	ceil@i+2,___ftadd@f1+2
  2545  0079CE  0E00               	movlw	0
  2546  0079D0  6E16               	movwf	___ftadd@f2,c
  2547  0079D2  0E80               	movlw	128
  2548  0079D4  6E17               	movwf	___ftadd@f2+1,c
  2549  0079D6  0E3F               	movlw	63
  2550  0079D8  6E18               	movwf	___ftadd@f2+2,c
  2551  0079DA  ECFD  F03C         	call	___ftadd	;wreg free
  2552  0079DE  C013  F038         	movff	?___ftadd,?_ceil
  2553  0079E2  C014  F039         	movff	?___ftadd+1,?_ceil+1
  2554  0079E6  C015  F03A         	movff	?___ftadd+2,?_ceil+2
  2555  0079EA  0012               	return	
  2556  0079EC                     l502:
  2557  0079EC  C03B  F038         	movff	ceil@i,?_ceil
  2558  0079F0  C03C  F039         	movff	ceil@i+1,?_ceil+1
  2559  0079F4  C03D  F03A         	movff	ceil@i+2,?_ceil+2
  2560  0079F8  0012               	return		;funcret
  2561  0079FA                     __end_of_ceil:
  2562                           	opt stack 0
  2563                           tblptru	equ	0xFF8
  2564                           tblptrh	equ	0xFF7
  2565                           tblptrl	equ	0xFF6
  2566                           tablat	equ	0xFF5
  2567                           postinc0	equ	0xFEE
  2568                           wreg	equ	0xFE8
  2569                           postdec1	equ	0xFE5
  2570                           fsr1l	equ	0xFE1
  2571                           indf2	equ	0xFDF
  2572                           fsr2h	equ	0xFDA
  2573                           fsr2l	equ	0xFD9
  2574                           status	equ	0xFD8
  2575                           
  2576 ;; *************** function _frexp *****************
  2577 ;; Defined at:
  2578 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  value           3    0[COMRAM] int 
  2581 ;;  eptr            2    3[COMRAM] PTR int 
  2582 ;;		 -> ceil@expon(2), 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;		None
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  3    0[COMRAM] PTR int 
  2587 ;; Registers used:
  2588 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2594 ;;      Params:         5       0       0       0       0       0       0       0       0
  2595 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2596 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2597 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2598 ;;Total ram usage:        7 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; This function calls:
  2601 ;;		Nothing
  2602 ;; This function is called by:
  2603 ;;		_ceil
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text16
  2608  0073BA                     __ptext16:
  2609                           	opt stack 0
  2610  0073BA                     _frexp:
  2611                           	opt stack 28
  2612                           
  2613                           ;incstack = 0
  2614  0073BA  5001               	movf	frexp@value,w,c
  2615  0073BC  1002               	iorwf	frexp@value+1,w,c
  2616  0073BE  1003               	iorwf	frexp@value+2,w,c
  2617  0073C0  A4D8               	btfss	status,2,c
  2618  0073C2  D009               	goto	l551
  2619  0073C4  C004  FFD9         	movff	frexp@eptr,fsr2l
  2620  0073C8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2621  0073CC  0E00               	movlw	0
  2622  0073CE  6EDE               	movwf	postinc2,c
  2623  0073D0  0E00               	movlw	0
  2624  0073D2  6EDD               	movwf	postdec2,c
  2625                           
  2626                           ;	Return value of _frexp is never used
  2627  0073D4  0012               	return	
  2628  0073D6                     l551:
  2629  0073D6  5003               	movf	frexp@value+2,w,c
  2630  0073D8  0B7F               	andlw	127
  2631  0073DA  6E06               	movwf	??_frexp& (0+255),c
  2632  0073DC  6A07               	clrf	(??_frexp+1)& (0+255),c
  2633  0073DE  90D8               	bcf	status,0,c
  2634  0073E0  3606               	rlcf	??_frexp,f,c
  2635  0073E2  3607               	rlcf	??_frexp+1,f,c
  2636  0073E4  C004  FFD9         	movff	frexp@eptr,fsr2l
  2637  0073E8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2638  0073EC  C006  FFDE         	movff	??_frexp,postinc2
  2639  0073F0  C007  FFDD         	movff	??_frexp+1,postdec2
  2640  0073F4  AE02               	btfss	frexp@value+1,7,c
  2641  0073F6  D003               	goto	u1410
  2642  0073F8  6A06               	clrf	??_frexp& (0+255),c
  2643  0073FA  2A06               	incf	??_frexp& (0+255),f,c
  2644  0073FC  D001               	goto	u1418
  2645  0073FE                     u1410:
  2646  0073FE  6A06               	clrf	??_frexp& (0+255),c
  2647  007400                     u1418:
  2648  007400  5006               	movf	??_frexp,w,c
  2649  007402  C004  FFD9         	movff	frexp@eptr,fsr2l
  2650  007406  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2651  00740A  12DE               	iorwf	postinc2,f,c
  2652  00740C  0E00               	movlw	0
  2653  00740E  12DD               	iorwf	postdec2,f,c
  2654  007410  C004  FFD9         	movff	frexp@eptr,fsr2l
  2655  007414  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  2656  007418  0E82               	movlw	130
  2657  00741A  26DE               	addwf	postinc2,f,c
  2658  00741C  0EFF               	movlw	255
  2659  00741E  22DD               	addwfc	postdec2,f,c
  2660  007420  8003               	bsf	frexp@value+2,0,c
  2661  007422  8203               	bsf	frexp@value+2,1,c
  2662  007424  8403               	bsf	frexp@value+2,2,c
  2663  007426  8603               	bsf	frexp@value+2,3,c
  2664  007428  8803               	bsf	frexp@value+2,4,c
  2665  00742A  8A03               	bsf	frexp@value+2,5,c
  2666  00742C  9C03               	bcf	frexp@value+2,6,c
  2667  00742E  9E02               	bcf	frexp@value+1,7,c
  2668  007430  0012               	return	
  2669  007432                     __end_of_frexp:
  2670                           	opt stack 0
  2671                           tblptru	equ	0xFF8
  2672                           tblptrh	equ	0xFF7
  2673                           tblptrl	equ	0xFF6
  2674                           tablat	equ	0xFF5
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           postdec1	equ	0xFE5
  2678                           fsr1l	equ	0xFE1
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function ___fttol *****************
  2687 ;; Defined at:
  2688 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  f1              3   30[COMRAM] float 
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  lval            4   40[COMRAM] unsigned long 
  2693 ;;  exp1            1   44[COMRAM] unsigned char 
  2694 ;;  sign1           1   39[COMRAM] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  4   30[COMRAM] long 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2704 ;;      Params:         4       0       0       0       0       0       0       0       0
  2705 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2706 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2707 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2708 ;;Total ram usage:       15 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_increasePWM
  2714 ;;		_decreasePWM
  2715 ;;		_ceil
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text17
  2720  00780E                     __ptext17:
  2721                           	opt stack 0
  2722  00780E                     ___fttol:
  2723                           	opt stack 28
  2724                           
  2725                           ;incstack = 0
  2726  00780E  C021  F023         	movff	___fttol@f1+2,??___fttol
  2727  007812  6A24               	clrf	(??___fttol+1)& (0+255),c
  2728  007814  6A25               	clrf	(??___fttol+2)& (0+255),c
  2729  007816  3420               	rlcf	___fttol@f1+1,w,c
  2730  007818  3623               	rlcf	??___fttol& (0+255),f,c
  2731  00781A  E301               	bnc	u1451
  2732  00781C  8024               	bsf	(??___fttol+1)& (0+255),0,c
  2733  00781E                     u1451:
  2734  00781E  5023               	movf	??___fttol,w,c
  2735  007820  6E2D               	movwf	___fttol@exp1,c
  2736  007822  502D               	movf	___fttol@exp1,w,c
  2737  007824  A4D8               	btfss	status,2,c
  2738  007826  D009               	goto	l636
  2739  007828  0E00               	movlw	0
  2740  00782A  6E1F               	movwf	?___fttol,c
  2741  00782C  0E00               	movlw	0
  2742  00782E  6E20               	movwf	?___fttol+1,c
  2743  007830  0E00               	movlw	0
  2744  007832  6E21               	movwf	?___fttol+2,c
  2745  007834  0E00               	movlw	0
  2746  007836  6E22               	movwf	?___fttol+3,c
  2747  007838  0012               	return	
  2748  00783A                     l636:
  2749  00783A  0E17               	movlw	23
  2750  00783C  6E23               	movwf	??___fttol& (0+255),c
  2751  00783E  C01F  F024         	movff	___fttol@f1,??___fttol+1
  2752  007842  C020  F025         	movff	___fttol@f1+1,??___fttol+2
  2753  007846  C021  F026         	movff	___fttol@f1+2,??___fttol+3
  2754  00784A  2823               	incf	??___fttol,w,c
  2755  00784C  6E27               	movwf	(??___fttol+4)& (0+255),c
  2756  00784E  D004               	goto	u1470
  2757  007850                     u1475:
  2758  007850  90D8               	bcf	status,0,c
  2759  007852  3226               	rrcf	??___fttol+3,f,c
  2760  007854  3225               	rrcf	??___fttol+2,f,c
  2761  007856  3224               	rrcf	??___fttol+1,f,c
  2762  007858                     u1470:
  2763  007858  2E27               	decfsz	(??___fttol+4)& (0+255),f,c
  2764  00785A  D7FA               	goto	u1475
  2765  00785C  5024               	movf	??___fttol+1,w,c
  2766  00785E  6E28               	movwf	___fttol@sign1,c
  2767  007860  8E20               	bsf	___fttol@f1+1,7,c
  2768  007862  0EFF               	movlw	255
  2769  007864  161F               	andwf	___fttol@f1,f,c
  2770  007866  0EFF               	movlw	255
  2771  007868  1620               	andwf	___fttol@f1+1,f,c
  2772  00786A  0E00               	movlw	0
  2773  00786C  1621               	andwf	___fttol@f1+2,f,c
  2774  00786E  501F               	movf	___fttol@f1,w,c
  2775  007870  6E29               	movwf	___fttol@lval,c
  2776  007872  5020               	movf	___fttol@f1+1,w,c
  2777  007874  6E2A               	movwf	___fttol@lval+1,c
  2778  007876  5021               	movf	___fttol@f1+2,w,c
  2779  007878  6E2B               	movwf	___fttol@lval+2,c
  2780  00787A  6A2C               	clrf	___fttol@lval+3,c
  2781  00787C  0E8E               	movlw	142
  2782  00787E  5E2D               	subwf	___fttol@exp1,f,c
  2783  007880  AE2D               	btfss	___fttol@exp1,7,c
  2784  007882  D016               	goto	l638
  2785  007884  502D               	movf	___fttol@exp1,w,c
  2786  007886  0A80               	xorlw	128
  2787  007888  0F8F               	addlw	143
  2788  00788A  B0D8               	btfsc	status,0,c
  2789  00788C  D009               	goto	l639
  2790  00788E  0E00               	movlw	0
  2791  007890  6E1F               	movwf	?___fttol,c
  2792  007892  0E00               	movlw	0
  2793  007894  6E20               	movwf	?___fttol+1,c
  2794  007896  0E00               	movlw	0
  2795  007898  6E21               	movwf	?___fttol+2,c
  2796  00789A  0E00               	movlw	0
  2797  00789C  6E22               	movwf	?___fttol+3,c
  2798  00789E  0012               	return	
  2799  0078A0                     l639:
  2800  0078A0  90D8               	bcf	status,0,c
  2801  0078A2  322C               	rrcf	___fttol@lval+3,f,c
  2802  0078A4  322B               	rrcf	___fttol@lval+2,f,c
  2803  0078A6  322A               	rrcf	___fttol@lval+1,f,c
  2804  0078A8  3229               	rrcf	___fttol@lval,f,c
  2805  0078AA  3E2D               	incfsz	___fttol@exp1,f,c
  2806  0078AC  D7F9               	goto	l639
  2807  0078AE  D015               	goto	u1510
  2808  0078B0                     l638:
  2809  0078B0  0E17               	movlw	23
  2810  0078B2  642D               	cpfsgt	___fttol@exp1,c
  2811  0078B4  D00F               	goto	l644
  2812  0078B6  0E00               	movlw	0
  2813  0078B8  6E1F               	movwf	?___fttol,c
  2814  0078BA  0E00               	movlw	0
  2815  0078BC  6E20               	movwf	?___fttol+1,c
  2816  0078BE  0E00               	movlw	0
  2817  0078C0  6E21               	movwf	?___fttol+2,c
  2818  0078C2  0E00               	movlw	0
  2819  0078C4  6E22               	movwf	?___fttol+3,c
  2820  0078C6  0012               	return	
  2821  0078C8  90D8               	bcf	status,0,c
  2822  0078CA  3629               	rlcf	___fttol@lval,f,c
  2823  0078CC  362A               	rlcf	___fttol@lval+1,f,c
  2824  0078CE  362B               	rlcf	___fttol@lval+2,f,c
  2825  0078D0  362C               	rlcf	___fttol@lval+3,f,c
  2826  0078D2  062D               	decf	___fttol@exp1,f,c
  2827  0078D4                     l644:
  2828  0078D4  502D               	movf	___fttol@exp1,w,c
  2829  0078D6  A4D8               	btfss	status,2,c
  2830  0078D8  D7F7               	goto	l645
  2831  0078DA                     u1510:
  2832  0078DA  5028               	movf	___fttol@sign1,w,c
  2833  0078DC  B4D8               	btfsc	status,2,c
  2834  0078DE  D008               	goto	l647
  2835  0078E0  1E2C               	comf	___fttol@lval+3,f,c
  2836  0078E2  1E2B               	comf	___fttol@lval+2,f,c
  2837  0078E4  1E2A               	comf	___fttol@lval+1,f,c
  2838  0078E6  6C29               	negf	___fttol@lval,c
  2839  0078E8  0E00               	movlw	0
  2840  0078EA  222A               	addwfc	___fttol@lval+1,f,c
  2841  0078EC  222B               	addwfc	___fttol@lval+2,f,c
  2842  0078EE  222C               	addwfc	___fttol@lval+3,f,c
  2843  0078F0                     l647:
  2844  0078F0  C029  F01F         	movff	___fttol@lval,?___fttol
  2845  0078F4  C02A  F020         	movff	___fttol@lval+1,?___fttol+1
  2846  0078F8  C02B  F021         	movff	___fttol@lval+2,?___fttol+2
  2847  0078FC  C02C  F022         	movff	___fttol@lval+3,?___fttol+3
  2848  007900  0012               	return	
  2849  007902                     __end_of___fttol:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1l	equ	0xFE1
  2859                           indf2	equ	0xFDF
  2860                           postinc2	equ	0xFDE
  2861                           postdec2	equ	0xFDD
  2862                           fsr2h	equ	0xFDA
  2863                           fsr2l	equ	0xFD9
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function ___ftge *****************
  2867 ;; Defined at:
  2868 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  ff1             3    0[COMRAM] float 
  2871 ;;  ff2             3    3[COMRAM] float 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;		None               void
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2883 ;;      Params:         6       0       0       0       0       0       0       0       0
  2884 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2885 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2886 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2887 ;;Total ram usage:        9 bytes
  2888 ;; Hardware stack levels used:    1
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_ceil
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text18
  2897  00752E                     __ptext18:
  2898                           	opt stack 0
  2899  00752E                     ___ftge:
  2900                           	opt stack 28
  2901                           
  2902                           ;incstack = 0
  2903  00752E  AE03               	btfss	___ftge@ff1+2,7,c
  2904  007530  D016               	goto	l608
  2905  007532  C001  F007         	movff	___ftge@ff1,??___ftge
  2906  007536  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  2907  00753A  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  2908  00753E  1E07               	comf	??___ftge,f,c
  2909  007540  1E08               	comf	??___ftge+1,f,c
  2910  007542  1E09               	comf	??___ftge+2,f,c
  2911  007544  2A07               	incf	??___ftge,f,c
  2912  007546  0E00               	movlw	0
  2913  007548  2208               	addwfc	??___ftge+1,f,c
  2914  00754A  2209               	addwfc	??___ftge+2,f,c
  2915  00754C  0E00               	movlw	0
  2916  00754E  2407               	addwf	??___ftge,w,c
  2917  007550  6E01               	movwf	___ftge@ff1,c
  2918  007552  0E00               	movlw	0
  2919  007554  2008               	addwfc	??___ftge+1,w,c
  2920  007556  6E02               	movwf	___ftge@ff1+1,c
  2921  007558  0E80               	movlw	128
  2922  00755A  2009               	addwfc	??___ftge+2,w,c
  2923  00755C  6E03               	movwf	___ftge@ff1+2,c
  2924  00755E                     l608:
  2925  00755E  AE06               	btfss	___ftge@ff2+2,7,c
  2926  007560  D016               	goto	l609
  2927  007562  C004  F007         	movff	___ftge@ff2,??___ftge
  2928  007566  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  2929  00756A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  2930  00756E  1E07               	comf	??___ftge,f,c
  2931  007570  1E08               	comf	??___ftge+1,f,c
  2932  007572  1E09               	comf	??___ftge+2,f,c
  2933  007574  2A07               	incf	??___ftge,f,c
  2934  007576  0E00               	movlw	0
  2935  007578  2208               	addwfc	??___ftge+1,f,c
  2936  00757A  2209               	addwfc	??___ftge+2,f,c
  2937  00757C  0E00               	movlw	0
  2938  00757E  2407               	addwf	??___ftge,w,c
  2939  007580  6E04               	movwf	___ftge@ff2,c
  2940  007582  0E00               	movlw	0
  2941  007584  2008               	addwfc	??___ftge+1,w,c
  2942  007586  6E05               	movwf	___ftge@ff2+1,c
  2943  007588  0E80               	movlw	128
  2944  00758A  2009               	addwfc	??___ftge+2,w,c
  2945  00758C  6E06               	movwf	___ftge@ff2+2,c
  2946  00758E                     l609:
  2947  00758E  0E00               	movlw	0
  2948  007590  1A01               	xorwf	___ftge@ff1,f,c
  2949  007592  0E00               	movlw	0
  2950  007594  1A02               	xorwf	___ftge@ff1+1,f,c
  2951  007596  0E80               	movlw	128
  2952  007598  1A03               	xorwf	___ftge@ff1+2,f,c
  2953  00759A  0E00               	movlw	0
  2954  00759C  1A04               	xorwf	___ftge@ff2,f,c
  2955  00759E  0E00               	movlw	0
  2956  0075A0  1A05               	xorwf	___ftge@ff2+1,f,c
  2957  0075A2  0E80               	movlw	128
  2958  0075A4  1A06               	xorwf	___ftge@ff2+2,f,c
  2959  0075A6  5004               	movf	___ftge@ff2,w,c
  2960  0075A8  5C01               	subwf	___ftge@ff1,w,c
  2961  0075AA  5005               	movf	___ftge@ff2+1,w,c
  2962  0075AC  5802               	subwfb	___ftge@ff1+1,w,c
  2963  0075AE  5006               	movf	___ftge@ff2+2,w,c
  2964  0075B0  5803               	subwfb	___ftge@ff1+2,w,c
  2965  0075B2  B0D8               	btfsc	status,0,c
  2966  0075B4  D002               	goto	l1615
  2967  0075B6  90D8               	bcf	status,0,c
  2968  0075B8  0012               	return	
  2969  0075BA                     l1615:
  2970  0075BA  80D8               	bsf	status,0,c
  2971  0075BC  0012               	return	
  2972  0075BE                     __end_of___ftge:
  2973                           	opt stack 0
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           postinc0	equ	0xFEE
  2979                           wreg	equ	0xFE8
  2980                           postdec1	equ	0xFE5
  2981                           fsr1l	equ	0xFE1
  2982                           indf2	equ	0xFDF
  2983                           postinc2	equ	0xFDE
  2984                           postdec2	equ	0xFDD
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989 ;; *************** function ___ftadd *****************
  2990 ;; Defined at:
  2991 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  f1              3   18[COMRAM] float 
  2994 ;;  f2              3   21[COMRAM] float 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  exp1            1   29[COMRAM] unsigned char 
  2997 ;;  exp2            1   28[COMRAM] unsigned char 
  2998 ;;  sign            1   27[COMRAM] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  3   18[COMRAM] float 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3008 ;;      Params:         6       0       0       0       0       0       0       0       0
  3009 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3010 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3011 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3012 ;;Total ram usage:       12 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    1
  3015 ;; This function calls:
  3016 ;;		___ftpack
  3017 ;; This function is called by:
  3018 ;;		_increasePWM
  3019 ;;		_decreasePWM
  3020 ;;		_ceil
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	text19
  3025  0079FA                     __ptext19:
  3026                           	opt stack 0
  3027  0079FA                     ___ftadd:
  3028                           	opt stack 27
  3029                           
  3030                           ;incstack = 0
  3031  0079FA  C015  F019         	movff	___ftadd@f1+2,??___ftadd
  3032  0079FE  6A1A               	clrf	(??___ftadd+1)& (0+255),c
  3033  007A00  6A1B               	clrf	(??___ftadd+2)& (0+255),c
  3034  007A02  3414               	rlcf	___ftadd@f1+1,w,c
  3035  007A04  3619               	rlcf	??___ftadd& (0+255),f,c
  3036  007A06  E301               	bnc	u1191
  3037  007A08  801A               	bsf	(??___ftadd+1)& (0+255),0,c
  3038  007A0A                     u1191:
  3039  007A0A  5019               	movf	??___ftadd,w,c
  3040  007A0C  6E1E               	movwf	___ftadd@exp1,c
  3041  007A0E  C018  F019         	movff	___ftadd@f2+2,??___ftadd
  3042  007A12  6A1A               	clrf	(??___ftadd+1)& (0+255),c
  3043  007A14  6A1B               	clrf	(??___ftadd+2)& (0+255),c
  3044  007A16  3417               	rlcf	___ftadd@f2+1,w,c
  3045  007A18  3619               	rlcf	??___ftadd& (0+255),f,c
  3046  007A1A  E301               	bnc	u1201
  3047  007A1C  801A               	bsf	(??___ftadd+1)& (0+255),0,c
  3048  007A1E                     u1201:
  3049  007A1E  5019               	movf	??___ftadd,w,c
  3050  007A20  6E1D               	movwf	___ftadd@exp2,c
  3051  007A22  501E               	movf	___ftadd@exp1,w,c
  3052  007A24  B4D8               	btfsc	status,2,c
  3053  007A26  D00B               	goto	u1230
  3054  007A28  501D               	movf	___ftadd@exp2,w,c
  3055  007A2A  5C1E               	subwf	___ftadd@exp1,w,c
  3056  007A2C  B0D8               	btfsc	status,0,c
  3057  007A2E  D00E               	goto	l567
  3058  007A30  501E               	movf	___ftadd@exp1,w,c
  3059  007A32  0800               	sublw	0
  3060  007A34  241D               	addwf	___ftadd@exp2,w,c
  3061  007A36  6E19               	movwf	??___ftadd& (0+255),c
  3062  007A38  0E18               	movlw	24
  3063  007A3A  6419               	cpfsgt	??___ftadd,c
  3064  007A3C  D007               	goto	l567
  3065  007A3E                     u1230:
  3066  007A3E  C016  F013         	movff	___ftadd@f2,?___ftadd
  3067  007A42  C017  F014         	movff	___ftadd@f2+1,?___ftadd+1
  3068  007A46  C018  F015         	movff	___ftadd@f2+2,?___ftadd+2
  3069  007A4A  0012               	return	
  3070  007A4C                     l567:
  3071  007A4C  501D               	movf	___ftadd@exp2,w,c
  3072  007A4E  B4D8               	btfsc	status,2,c
  3073  007A50  D00B               	goto	u1260
  3074  007A52  501E               	movf	___ftadd@exp1,w,c
  3075  007A54  5C1D               	subwf	___ftadd@exp2,w,c
  3076  007A56  B0D8               	btfsc	status,0,c
  3077  007A58  D00E               	goto	l571
  3078  007A5A  501D               	movf	___ftadd@exp2,w,c
  3079  007A5C  0800               	sublw	0
  3080  007A5E  241E               	addwf	___ftadd@exp1,w,c
  3081  007A60  6E19               	movwf	??___ftadd& (0+255),c
  3082  007A62  0E18               	movlw	24
  3083  007A64  6419               	cpfsgt	??___ftadd,c
  3084  007A66  D007               	goto	l571
  3085  007A68                     u1260:
  3086  007A68  C013  F013         	movff	___ftadd@f1,?___ftadd
  3087  007A6C  C014  F014         	movff	___ftadd@f1+1,?___ftadd+1
  3088  007A70  C015  F015         	movff	___ftadd@f1+2,?___ftadd+2
  3089  007A74  0012               	return	
  3090  007A76                     l571:
  3091  007A76  0E06               	movlw	6
  3092  007A78  6E1C               	movwf	___ftadd@sign,c
  3093  007A7A  BE15               	btfsc	___ftadd@f1+2,7,c
  3094  007A7C  8E1C               	bsf	___ftadd@sign,7,c
  3095  007A7E  BE18               	btfsc	___ftadd@f2+2,7,c
  3096  007A80  8C1C               	bsf	___ftadd@sign,6,c
  3097  007A82  8E14               	bsf	___ftadd@f1+1,7,c
  3098  007A84  0EFF               	movlw	255
  3099  007A86  1613               	andwf	___ftadd@f1,f,c
  3100  007A88  0EFF               	movlw	255
  3101  007A8A  1614               	andwf	___ftadd@f1+1,f,c
  3102  007A8C  0E00               	movlw	0
  3103  007A8E  1615               	andwf	___ftadd@f1+2,f,c
  3104  007A90  8E17               	bsf	___ftadd@f2+1,7,c
  3105  007A92  0EFF               	movlw	255
  3106  007A94  1616               	andwf	___ftadd@f2,f,c
  3107  007A96  0EFF               	movlw	255
  3108  007A98  1617               	andwf	___ftadd@f2+1,f,c
  3109  007A9A  0E00               	movlw	0
  3110  007A9C  1618               	andwf	___ftadd@f2+2,f,c
  3111  007A9E  501D               	movf	___ftadd@exp2,w,c
  3112  007AA0  5C1E               	subwf	___ftadd@exp1,w,c
  3113  007AA2  B0D8               	btfsc	status,0,c
  3114  007AA4  D01B               	goto	l576
  3115  007AA6                     u1290:
  3116  007AA6  90D8               	bcf	status,0,c
  3117  007AA8  3616               	rlcf	___ftadd@f2,f,c
  3118  007AAA  3617               	rlcf	___ftadd@f2+1,f,c
  3119  007AAC  3618               	rlcf	___ftadd@f2+2,f,c
  3120  007AAE  061D               	decf	___ftadd@exp2,f,c
  3121  007AB0  501E               	movf	___ftadd@exp1,w,c
  3122  007AB2  181D               	xorwf	___ftadd@exp2,w,c
  3123  007AB4  B4D8               	btfsc	status,2,c
  3124  007AB6  D00D               	goto	l581
  3125  007AB8  061C               	decf	___ftadd@sign,f,c
  3126  007ABA  C01C  F019         	movff	___ftadd@sign,??___ftadd
  3127  007ABE  0E07               	movlw	7
  3128  007AC0  1619               	andwf	??___ftadd,f,c
  3129  007AC2  B4D8               	btfsc	status,2,c
  3130  007AC4  D006               	goto	l581
  3131  007AC6  D7EF               	goto	u1290
  3132  007AC8  90D8               	bcf	status,0,c
  3133  007ACA  3215               	rrcf	___ftadd@f1+2,f,c
  3134  007ACC  3214               	rrcf	___ftadd@f1+1,f,c
  3135  007ACE  3213               	rrcf	___ftadd@f1,f,c
  3136  007AD0  2A1E               	incf	___ftadd@exp1,f,c
  3137  007AD2                     l581:
  3138  007AD2  501D               	movf	___ftadd@exp2,w,c
  3139  007AD4  181E               	xorwf	___ftadd@exp1,w,c
  3140  007AD6  B4D8               	btfsc	status,2,c
  3141  007AD8  D01F               	goto	u1360
  3142  007ADA  D7F6               	goto	l582
  3143  007ADC                     l576:
  3144  007ADC  501E               	movf	___ftadd@exp1,w,c
  3145  007ADE  5C1D               	subwf	___ftadd@exp2,w,c
  3146  007AE0  B0D8               	btfsc	status,0,c
  3147  007AE2  D01A               	goto	u1360
  3148  007AE4                     u1330:
  3149  007AE4  90D8               	bcf	status,0,c
  3150  007AE6  3613               	rlcf	___ftadd@f1,f,c
  3151  007AE8  3614               	rlcf	___ftadd@f1+1,f,c
  3152  007AEA  3615               	rlcf	___ftadd@f1+2,f,c
  3153  007AEC  061E               	decf	___ftadd@exp1,f,c
  3154  007AEE  501E               	movf	___ftadd@exp1,w,c
  3155  007AF0  181D               	xorwf	___ftadd@exp2,w,c
  3156  007AF2  B4D8               	btfsc	status,2,c
  3157  007AF4  D00D               	goto	l590
  3158  007AF6  061C               	decf	___ftadd@sign,f,c
  3159  007AF8  C01C  F019         	movff	___ftadd@sign,??___ftadd
  3160  007AFC  0E07               	movlw	7
  3161  007AFE  1619               	andwf	??___ftadd,f,c
  3162  007B00  B4D8               	btfsc	status,2,c
  3163  007B02  D006               	goto	l590
  3164  007B04  D7EF               	goto	u1330
  3165  007B06  90D8               	bcf	status,0,c
  3166  007B08  3218               	rrcf	___ftadd@f2+2,f,c
  3167  007B0A  3217               	rrcf	___ftadd@f2+1,f,c
  3168  007B0C  3216               	rrcf	___ftadd@f2,f,c
  3169  007B0E  2A1D               	incf	___ftadd@exp2,f,c
  3170  007B10                     l590:
  3171  007B10  501D               	movf	___ftadd@exp2,w,c
  3172  007B12  181E               	xorwf	___ftadd@exp1,w,c
  3173  007B14  A4D8               	btfss	status,2,c
  3174  007B16  D7F7               	goto	l591
  3175  007B18                     u1360:
  3176  007B18  AE1C               	btfss	___ftadd@sign,7,c
  3177  007B1A  D00C               	goto	l593
  3178  007B1C  0EFF               	movlw	255
  3179  007B1E  1A13               	xorwf	___ftadd@f1,f,c
  3180  007B20  0EFF               	movlw	255
  3181  007B22  1A14               	xorwf	___ftadd@f1+1,f,c
  3182  007B24  0EFF               	movlw	255
  3183  007B26  1A15               	xorwf	___ftadd@f1+2,f,c
  3184  007B28  0E01               	movlw	1
  3185  007B2A  2613               	addwf	___ftadd@f1,f,c
  3186  007B2C  0E00               	movlw	0
  3187  007B2E  2214               	addwfc	___ftadd@f1+1,f,c
  3188  007B30  0E00               	movlw	0
  3189  007B32  2215               	addwfc	___ftadd@f1+2,f,c
  3190  007B34                     l593:
  3191  007B34  AC1C               	btfss	___ftadd@sign,6,c
  3192  007B36  D00C               	goto	l594
  3193  007B38  0EFF               	movlw	255
  3194  007B3A  1A16               	xorwf	___ftadd@f2,f,c
  3195  007B3C  0EFF               	movlw	255
  3196  007B3E  1A17               	xorwf	___ftadd@f2+1,f,c
  3197  007B40  0EFF               	movlw	255
  3198  007B42  1A18               	xorwf	___ftadd@f2+2,f,c
  3199  007B44  0E01               	movlw	1
  3200  007B46  2616               	addwf	___ftadd@f2,f,c
  3201  007B48  0E00               	movlw	0
  3202  007B4A  2217               	addwfc	___ftadd@f2+1,f,c
  3203  007B4C  0E00               	movlw	0
  3204  007B4E  2218               	addwfc	___ftadd@f2+2,f,c
  3205  007B50                     l594:
  3206  007B50  0E00               	movlw	0
  3207  007B52  6E1C               	movwf	___ftadd@sign,c
  3208  007B54  5013               	movf	___ftadd@f1,w,c
  3209  007B56  2616               	addwf	___ftadd@f2,f,c
  3210  007B58  5014               	movf	___ftadd@f1+1,w,c
  3211  007B5A  2217               	addwfc	___ftadd@f2+1,f,c
  3212  007B5C  5015               	movf	___ftadd@f1+2,w,c
  3213  007B5E  2218               	addwfc	___ftadd@f2+2,f,c
  3214  007B60  AE18               	btfss	___ftadd@f2+2,7,c
  3215  007B62  D00E               	goto	l595
  3216  007B64  0EFF               	movlw	255
  3217  007B66  1A16               	xorwf	___ftadd@f2,f,c
  3218  007B68  0EFF               	movlw	255
  3219  007B6A  1A17               	xorwf	___ftadd@f2+1,f,c
  3220  007B6C  0EFF               	movlw	255
  3221  007B6E  1A18               	xorwf	___ftadd@f2+2,f,c
  3222  007B70  0E01               	movlw	1
  3223  007B72  2616               	addwf	___ftadd@f2,f,c
  3224  007B74  0E00               	movlw	0
  3225  007B76  2217               	addwfc	___ftadd@f2+1,f,c
  3226  007B78  0E00               	movlw	0
  3227  007B7A  2218               	addwfc	___ftadd@f2+2,f,c
  3228  007B7C  0E01               	movlw	1
  3229  007B7E  6E1C               	movwf	___ftadd@sign,c
  3230  007B80                     l595:
  3231  007B80  C016  F001         	movff	___ftadd@f2,___ftpack@arg
  3232  007B84  C017  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  3233  007B88  C018  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  3234  007B8C  C01E  F004         	movff	___ftadd@exp1,___ftpack@exp
  3235  007B90  C01C  F005         	movff	___ftadd@sign,___ftpack@sign
  3236  007B94  ECDF  F03A         	call	___ftpack	;wreg free
  3237  007B98  C001  F013         	movff	?___ftpack,?___ftadd
  3238  007B9C  C002  F014         	movff	?___ftpack+1,?___ftadd+1
  3239  007BA0  C003  F015         	movff	?___ftpack+2,?___ftadd+2
  3240  007BA4  0012               	return	
  3241  007BA6                     __end_of___ftadd:
  3242                           	opt stack 0
  3243                           tblptru	equ	0xFF8
  3244                           tblptrh	equ	0xFF7
  3245                           tblptrl	equ	0xFF6
  3246                           tablat	equ	0xFF5
  3247                           postinc0	equ	0xFEE
  3248                           wreg	equ	0xFE8
  3249                           postdec1	equ	0xFE5
  3250                           fsr1l	equ	0xFE1
  3251                           indf2	equ	0xFDF
  3252                           postinc2	equ	0xFDE
  3253                           postdec2	equ	0xFDD
  3254                           fsr2h	equ	0xFDA
  3255                           fsr2l	equ	0xFD9
  3256                           status	equ	0xFD8
  3257                           
  3258 ;; *************** function ___altoft *****************
  3259 ;; Defined at:
  3260 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;  c               4   45[COMRAM] long 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  sign            1   54[COMRAM] unsigned char 
  3265 ;;  exp             1   53[COMRAM] unsigned char 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  3   45[COMRAM] float 
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3275 ;;      Params:         4       0       0       0       0       0       0       0       0
  3276 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3277 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3278 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3279 ;;Total ram usage:       10 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    1
  3282 ;; This function calls:
  3283 ;;		___ftpack
  3284 ;; This function is called by:
  3285 ;;		_ceil
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text20
  3290  007342                     __ptext20:
  3291                           	opt stack 0
  3292  007342                     ___altoft:
  3293                           	opt stack 27
  3294                           
  3295                           ;incstack = 0
  3296  007342  0E00               	movlw	0
  3297  007344  6E37               	movwf	___altoft@sign,c
  3298  007346  0E8E               	movlw	142
  3299  007348  6E36               	movwf	___altoft@exp,c
  3300  00734A  AE31               	btfss	___altoft@c+3,7,c
  3301  00734C  D011               	goto	l380
  3302  00734E  1E31               	comf	___altoft@c+3,f,c
  3303  007350  1E30               	comf	___altoft@c+2,f,c
  3304  007352  1E2F               	comf	___altoft@c+1,f,c
  3305  007354  6C2E               	negf	___altoft@c,c
  3306  007356  0E00               	movlw	0
  3307  007358  222F               	addwfc	___altoft@c+1,f,c
  3308  00735A  2230               	addwfc	___altoft@c+2,f,c
  3309  00735C  2231               	addwfc	___altoft@c+3,f,c
  3310  00735E  0E01               	movlw	1
  3311  007360  6E37               	movwf	___altoft@sign,c
  3312  007362  D006               	goto	l380
  3313  007364  90D8               	bcf	status,0,c
  3314  007366  3231               	rrcf	___altoft@c+3,f,c
  3315  007368  3230               	rrcf	___altoft@c+2,f,c
  3316  00736A  322F               	rrcf	___altoft@c+1,f,c
  3317  00736C  322E               	rrcf	___altoft@c,f,c
  3318  00736E  2A36               	incf	___altoft@exp,f,c
  3319  007370                     l380:
  3320  007370  0E00               	movlw	0
  3321  007372  142E               	andwf	___altoft@c,w,c
  3322  007374  6E32               	movwf	??___altoft& (0+255),c
  3323  007376  0E00               	movlw	0
  3324  007378  142F               	andwf	___altoft@c+1,w,c
  3325  00737A  6E33               	movwf	(??___altoft+1)& (0+255),c
  3326  00737C  0E00               	movlw	0
  3327  00737E  1430               	andwf	___altoft@c+2,w,c
  3328  007380  6E34               	movwf	(??___altoft+2)& (0+255),c
  3329  007382  0EFF               	movlw	255
  3330  007384  1431               	andwf	___altoft@c+3,w,c
  3331  007386  6E35               	movwf	(??___altoft+3)& (0+255),c
  3332  007388  5032               	movf	??___altoft,w,c
  3333  00738A  1033               	iorwf	??___altoft+1,w,c
  3334  00738C  1034               	iorwf	??___altoft+2,w,c
  3335  00738E  1035               	iorwf	??___altoft+3,w,c
  3336  007390  A4D8               	btfss	status,2,c
  3337  007392  D7E8               	goto	l381
  3338  007394  C02E  F001         	movff	___altoft@c,___ftpack@arg
  3339  007398  C02F  F002         	movff	___altoft@c+1,___ftpack@arg+1
  3340  00739C  C030  F003         	movff	___altoft@c+2,___ftpack@arg+2
  3341  0073A0  C036  F004         	movff	___altoft@exp,___ftpack@exp
  3342  0073A4  C037  F005         	movff	___altoft@sign,___ftpack@sign
  3343  0073A8  ECDF  F03A         	call	___ftpack	;wreg free
  3344  0073AC  C001  F02E         	movff	?___ftpack,?___altoft
  3345  0073B0  C002  F02F         	movff	?___ftpack+1,?___altoft+1
  3346  0073B4  C003  F030         	movff	?___ftpack+2,?___altoft+2
  3347  0073B8  0012               	return	
  3348  0073BA                     __end_of___altoft:
  3349                           	opt stack 0
  3350                           tblptru	equ	0xFF8
  3351                           tblptrh	equ	0xFF7
  3352                           tblptrl	equ	0xFF6
  3353                           tablat	equ	0xFF5
  3354                           postinc0	equ	0xFEE
  3355                           wreg	equ	0xFE8
  3356                           postdec1	equ	0xFE5
  3357                           fsr1l	equ	0xFE1
  3358                           indf2	equ	0xFDF
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function ___wmul *****************
  3366 ;; Defined at:
  3367 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  multiplier      2    0[COMRAM] unsigned int 
  3370 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  product         2    4[COMRAM] unsigned int 
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  2    0[COMRAM] unsigned int 
  3375 ;; Registers used:
  3376 ;;		wreg, status,2, status,0, prodl, prodh
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3382 ;;      Params:         4       0       0       0       0       0       0       0       0
  3383 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3384 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3385 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3386 ;;Total ram usage:        6 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; This function calls:
  3389 ;;		Nothing
  3390 ;; This function is called by:
  3391 ;;		_increasePWM
  3392 ;;		_decreasePWM
  3393 ;; This function uses a non-reentrant model
  3394 ;;
  3395                           
  3396                           	psect	text21
  3397  0071A0                     __ptext21:
  3398                           	opt stack 0
  3399  0071A0                     ___wmul:
  3400                           	opt stack 29
  3401                           
  3402                           ;incstack = 0
  3403  0071A0  5001               	movf	___wmul@multiplier,w,c
  3404  0071A2  0203               	mulwf	___wmul@multiplicand,c
  3405  0071A4  CFF3 F005          	movff	prodl,___wmul@product
  3406  0071A8  CFF4 F006          	movff	prodh,___wmul@product+1
  3407  0071AC  5001               	movf	___wmul@multiplier,w,c
  3408  0071AE  0204               	mulwf	___wmul@multiplicand+1,c
  3409  0071B0  50F3               	movf	prodl,w,c
  3410  0071B2  2606               	addwf	___wmul@product+1,f,c
  3411  0071B4  5002               	movf	___wmul@multiplier+1,w,c
  3412  0071B6  0203               	mulwf	___wmul@multiplicand,c
  3413  0071B8  50F3               	movf	prodl,w,c
  3414  0071BA  2606               	addwf	___wmul@product+1,f,c
  3415  0071BC  C005  F001         	movff	___wmul@product,?___wmul
  3416  0071C0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3417  0071C4  0012               	return	
  3418  0071C6                     __end_of___wmul:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           postdec1	equ	0xFE5
  3429                           fsr1l	equ	0xFE1
  3430                           indf2	equ	0xFDF
  3431                           postinc2	equ	0xFDE
  3432                           postdec2	equ	0xFDD
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function ___ftneg *****************
  3438 ;; Defined at:
  3439 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  f1              3   63[COMRAM] float 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  3   63[COMRAM] float 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3453 ;;      Params:         3       0       0       0       0       0       0       0       0
  3454 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3456 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3457 ;;Total ram usage:        3 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; This function calls:
  3460 ;;		Nothing
  3461 ;; This function is called by:
  3462 ;;		_increasePWM
  3463 ;;		_decreasePWM
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text22
  3468  00717C                     __ptext22:
  3469                           	opt stack 0
  3470  00717C                     ___ftneg:
  3471                           	opt stack 29
  3472                           
  3473                           ;incstack = 0
  3474  00717C  5040               	movf	___ftneg@f1,w,c
  3475  00717E  1041               	iorwf	___ftneg@f1+1,w,c
  3476  007180  1042               	iorwf	___ftneg@f1+2,w,c
  3477  007182  B4D8               	btfsc	status,2,c
  3478  007184  D006               	goto	l626
  3479  007186  0E00               	movlw	0
  3480  007188  1A40               	xorwf	___ftneg@f1,f,c
  3481  00718A  0E00               	movlw	0
  3482  00718C  1A41               	xorwf	___ftneg@f1+1,f,c
  3483  00718E  0E80               	movlw	128
  3484  007190  1A42               	xorwf	___ftneg@f1+2,f,c
  3485  007192                     l626:
  3486  007192  C040  F040         	movff	___ftneg@f1,?___ftneg
  3487  007196  C041  F041         	movff	___ftneg@f1+1,?___ftneg+1
  3488  00719A  C042  F042         	movff	___ftneg@f1+2,?___ftneg+2
  3489  00719E  0012               	return		;funcret
  3490  0071A0                     __end_of___ftneg:
  3491                           	opt stack 0
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           prodh	equ	0xFF4
  3497                           prodl	equ	0xFF3
  3498                           postinc0	equ	0xFEE
  3499                           wreg	equ	0xFE8
  3500                           postdec1	equ	0xFE5
  3501                           fsr1l	equ	0xFE1
  3502                           indf2	equ	0xFDF
  3503                           postinc2	equ	0xFDE
  3504                           postdec2	equ	0xFDD
  3505                           fsr2h	equ	0xFDA
  3506                           fsr2l	equ	0xFD9
  3507                           status	equ	0xFD8
  3508                           
  3509 ;; *************** function ___awtoft *****************
  3510 ;; Defined at:
  3511 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;  c               2   14[COMRAM] int 
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;  sign            1   17[COMRAM] unsigned char 
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  3   14[COMRAM] float 
  3518 ;; Registers used:
  3519 ;;		wreg, status,2, status,0, cstack
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3525 ;;      Params:         3       0       0       0       0       0       0       0       0
  3526 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3527 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3528 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3529 ;;Total ram usage:        4 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    1
  3532 ;; This function calls:
  3533 ;;		___ftpack
  3534 ;; This function is called by:
  3535 ;;		_increasePWM
  3536 ;;		_decreasePWM
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text23
  3541  007252                     __ptext23:
  3542                           	opt stack 0
  3543  007252                     ___awtoft:
  3544                           	opt stack 28
  3545                           
  3546                           ;incstack = 0
  3547  007252  0E00               	movlw	0
  3548  007254  6E12               	movwf	___awtoft@sign,c
  3549  007256  AE10               	btfss	___awtoft@c+1,7,c
  3550  007258  D006               	goto	l491
  3551  00725A  6C0F               	negf	___awtoft@c,c
  3552  00725C  1E10               	comf	___awtoft@c+1,f,c
  3553  00725E  B0D8               	btfsc	status,0,c
  3554  007260  2A10               	incf	___awtoft@c+1,f,c
  3555  007262  0E01               	movlw	1
  3556  007264  6E12               	movwf	___awtoft@sign,c
  3557  007266                     l491:
  3558  007266  C00F  F001         	movff	___awtoft@c,___ftpack@arg
  3559  00726A  C010  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3560  00726E  6A03               	clrf	___ftpack@arg+2,c
  3561  007270  0E8E               	movlw	142
  3562  007272  6E04               	movwf	___ftpack@exp,c
  3563  007274  C012  F005         	movff	___awtoft@sign,___ftpack@sign
  3564  007278  ECDF  F03A         	call	___ftpack	;wreg free
  3565  00727C  C001  F00F         	movff	?___ftpack,?___awtoft
  3566  007280  C002  F010         	movff	?___ftpack+1,?___awtoft+1
  3567  007284  C003  F011         	movff	?___ftpack+2,?___awtoft+2
  3568  007288  0012               	return	
  3569  00728A                     __end_of___awtoft:
  3570                           	opt stack 0
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           postinc0	equ	0xFEE
  3578                           wreg	equ	0xFE8
  3579                           postdec1	equ	0xFE5
  3580                           fsr1l	equ	0xFE1
  3581                           indf2	equ	0xFDF
  3582                           postinc2	equ	0xFDE
  3583                           postdec2	equ	0xFDD
  3584                           fsr2h	equ	0xFDA
  3585                           fsr2l	equ	0xFD9
  3586                           status	equ	0xFD8
  3587                           
  3588 ;; *************** function ___ftpack *****************
  3589 ;; Defined at:
  3590 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;  arg             3    0[COMRAM] unsigned um
  3593 ;;  exp             1    3[COMRAM] unsigned char 
  3594 ;;  sign            1    4[COMRAM] unsigned char 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  3    0[COMRAM] float 
  3599 ;; Registers used:
  3600 ;;		wreg, status,2, status,0
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3606 ;;      Params:         5       0       0       0       0       0       0       0       0
  3607 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3608 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3609 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3610 ;;Total ram usage:        8 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; This function calls:
  3613 ;;		Nothing
  3614 ;; This function is called by:
  3615 ;;		___altoft
  3616 ;;		___awtoft
  3617 ;;		___ftadd
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text24
  3622  0075BE                     __ptext24:
  3623                           	opt stack 0
  3624  0075BE                     ___ftpack:
  3625                           	opt stack 27
  3626                           
  3627                           ;incstack = 0
  3628  0075BE  5004               	movf	___ftpack@exp,w,c
  3629  0075C0  B4D8               	btfsc	status,2,c
  3630  0075C2  D005               	goto	u1100
  3631  0075C4  5001               	movf	___ftpack@arg,w,c
  3632  0075C6  1002               	iorwf	___ftpack@arg+1,w,c
  3633  0075C8  1003               	iorwf	___ftpack@arg+2,w,c
  3634  0075CA  A4D8               	btfss	status,2,c
  3635  0075CC  D00C               	goto	l520
  3636  0075CE                     u1100:
  3637  0075CE  0E00               	movlw	0
  3638  0075D0  6E01               	movwf	?___ftpack,c
  3639  0075D2  0E00               	movlw	0
  3640  0075D4  6E02               	movwf	?___ftpack+1,c
  3641  0075D6  0E00               	movlw	0
  3642  0075D8  6E03               	movwf	?___ftpack+2,c
  3643  0075DA  0012               	return	
  3644  0075DC  2A04               	incf	___ftpack@exp,f,c
  3645  0075DE  90D8               	bcf	status,0,c
  3646  0075E0  3203               	rrcf	___ftpack@arg+2,f,c
  3647  0075E2  3202               	rrcf	___ftpack@arg+1,f,c
  3648  0075E4  3201               	rrcf	___ftpack@arg,f,c
  3649  0075E6                     l520:
  3650  0075E6  0E00               	movlw	0
  3651  0075E8  1401               	andwf	___ftpack@arg,w,c
  3652  0075EA  6E06               	movwf	??___ftpack& (0+255),c
  3653  0075EC  0E00               	movlw	0
  3654  0075EE  1402               	andwf	___ftpack@arg+1,w,c
  3655  0075F0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3656  0075F2  0EFE               	movlw	254
  3657  0075F4  1403               	andwf	___ftpack@arg+2,w,c
  3658  0075F6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3659  0075F8  5006               	movf	??___ftpack,w,c
  3660  0075FA  1007               	iorwf	??___ftpack+1,w,c
  3661  0075FC  1008               	iorwf	??___ftpack+2,w,c
  3662  0075FE  B4D8               	btfsc	status,2,c
  3663  007600  D00C               	goto	l523
  3664  007602  D7EC               	goto	l521
  3665  007604  2A04               	incf	___ftpack@exp,f,c
  3666  007606  0E01               	movlw	1
  3667  007608  2601               	addwf	___ftpack@arg,f,c
  3668  00760A  0E00               	movlw	0
  3669  00760C  2202               	addwfc	___ftpack@arg+1,f,c
  3670  00760E  0E00               	movlw	0
  3671  007610  2203               	addwfc	___ftpack@arg+2,f,c
  3672  007612  90D8               	bcf	status,0,c
  3673  007614  3203               	rrcf	___ftpack@arg+2,f,c
  3674  007616  3202               	rrcf	___ftpack@arg+1,f,c
  3675  007618  3201               	rrcf	___ftpack@arg,f,c
  3676  00761A                     l523:
  3677  00761A  0E00               	movlw	0
  3678  00761C  1401               	andwf	___ftpack@arg,w,c
  3679  00761E  6E06               	movwf	??___ftpack& (0+255),c
  3680  007620  0E00               	movlw	0
  3681  007622  1402               	andwf	___ftpack@arg+1,w,c
  3682  007624  6E07               	movwf	(??___ftpack+1)& (0+255),c
  3683  007626  0EFF               	movlw	255
  3684  007628  1403               	andwf	___ftpack@arg+2,w,c
  3685  00762A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  3686  00762C  5006               	movf	??___ftpack,w,c
  3687  00762E  1007               	iorwf	??___ftpack+1,w,c
  3688  007630  1008               	iorwf	??___ftpack+2,w,c
  3689  007632  B4D8               	btfsc	status,2,c
  3690  007634  D006               	goto	l526
  3691  007636  D7E6               	goto	l524
  3692  007638  0604               	decf	___ftpack@exp,f,c
  3693  00763A  90D8               	bcf	status,0,c
  3694  00763C  3601               	rlcf	___ftpack@arg,f,c
  3695  00763E  3602               	rlcf	___ftpack@arg+1,f,c
  3696  007640  3603               	rlcf	___ftpack@arg+2,f,c
  3697  007642                     l526:
  3698  007642  BE02               	btfsc	___ftpack@arg+1,7,c
  3699  007644  D003               	goto	u1140
  3700  007646  0E02               	movlw	2
  3701  007648  6004               	cpfslt	___ftpack@exp,c
  3702  00764A  D7F6               	goto	l527
  3703  00764C                     u1140:
  3704  00764C  A004               	btfss	___ftpack@exp,0,c
  3705  00764E  9E02               	bcf	___ftpack@arg+1,7,c
  3706  007650  90D8               	bcf	status,0,c
  3707  007652  3204               	rrcf	___ftpack@exp,f,c
  3708  007654  5004               	movf	___ftpack@exp,w,c
  3709  007656  1203               	iorwf	___ftpack@arg+2,f,c
  3710  007658  5005               	movf	___ftpack@sign,w,c
  3711  00765A  A4D8               	btfss	status,2,c
  3712  00765C  8E03               	bsf	___ftpack@arg+2,7,c
  3713  00765E  C001  F001         	movff	___ftpack@arg,?___ftpack
  3714  007662  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  3715  007666  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  3716  00766A  0012               	return	
  3717  00766C                     __end_of___ftpack:
  3718                           	opt stack 0
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           prodh	equ	0xFF4
  3724                           prodl	equ	0xFF3
  3725                           postinc0	equ	0xFEE
  3726                           wreg	equ	0xFE8
  3727                           postdec1	equ	0xFE5
  3728                           fsr1l	equ	0xFE1
  3729                           indf2	equ	0xFDF
  3730                           postinc2	equ	0xFDE
  3731                           postdec2	equ	0xFDD
  3732                           fsr2h	equ	0xFDA
  3733                           fsr2l	equ	0xFD9
  3734                           status	equ	0xFD8
  3735                           
  3736 ;; *************** function ___awdiv *****************
  3737 ;; Defined at:
  3738 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;  dividend        2    6[COMRAM] int 
  3741 ;;  divisor         2    8[COMRAM] int 
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;  quotient        2   12[COMRAM] int 
  3744 ;;  sign            1   11[COMRAM] unsigned char 
  3745 ;;  counter         1   10[COMRAM] unsigned char 
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  2    6[COMRAM] int 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3755 ;;      Params:         4       0       0       0       0       0       0       0       0
  3756 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3757 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3758 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3759 ;;Total ram usage:        8 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; This function calls:
  3762 ;;		Nothing
  3763 ;; This function is called by:
  3764 ;;		_increasePWM
  3765 ;;		_decreasePWM
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           	psect	text25
  3770  0074AA                     __ptext25:
  3771                           	opt stack 0
  3772  0074AA                     ___awdiv:
  3773                           	opt stack 29
  3774                           
  3775                           ;incstack = 0
  3776  0074AA  0E00               	movlw	0
  3777  0074AC  6E0C               	movwf	___awdiv@sign,c
  3778  0074AE  AE0A               	btfss	___awdiv@divisor+1,7,c
  3779  0074B0  D006               	goto	l463
  3780  0074B2  6C09               	negf	___awdiv@divisor,c
  3781  0074B4  1E0A               	comf	___awdiv@divisor+1,f,c
  3782  0074B6  B0D8               	btfsc	status,0,c
  3783  0074B8  2A0A               	incf	___awdiv@divisor+1,f,c
  3784  0074BA  0E01               	movlw	1
  3785  0074BC  6E0C               	movwf	___awdiv@sign,c
  3786  0074BE                     l463:
  3787  0074BE  AE08               	btfss	___awdiv@dividend+1,7,c
  3788  0074C0  D006               	goto	l464
  3789  0074C2  6C07               	negf	___awdiv@dividend,c
  3790  0074C4  1E08               	comf	___awdiv@dividend+1,f,c
  3791  0074C6  B0D8               	btfsc	status,0,c
  3792  0074C8  2A08               	incf	___awdiv@dividend+1,f,c
  3793  0074CA  0E01               	movlw	1
  3794  0074CC  1A0C               	xorwf	___awdiv@sign,f,c
  3795  0074CE                     l464:
  3796  0074CE  0E00               	movlw	0
  3797  0074D0  6E0E               	movwf	___awdiv@quotient+1,c
  3798  0074D2  0E00               	movlw	0
  3799  0074D4  6E0D               	movwf	___awdiv@quotient,c
  3800  0074D6  5009               	movf	___awdiv@divisor,w,c
  3801  0074D8  100A               	iorwf	___awdiv@divisor+1,w,c
  3802  0074DA  B4D8               	btfsc	status,2,c
  3803  0074DC  D01C               	goto	l471
  3804  0074DE  0E01               	movlw	1
  3805  0074E0  6E0B               	movwf	___awdiv@counter,c
  3806  0074E2  D004               	goto	l466
  3807  0074E4  90D8               	bcf	status,0,c
  3808  0074E6  3609               	rlcf	___awdiv@divisor,f,c
  3809  0074E8  360A               	rlcf	___awdiv@divisor+1,f,c
  3810  0074EA  2A0B               	incf	___awdiv@counter,f,c
  3811  0074EC                     l466:
  3812  0074EC  AE0A               	btfss	___awdiv@divisor+1,7,c
  3813  0074EE  D7FA               	goto	l467
  3814  0074F0                     u1610:
  3815  0074F0  90D8               	bcf	status,0,c
  3816  0074F2  360D               	rlcf	___awdiv@quotient,f,c
  3817  0074F4  360E               	rlcf	___awdiv@quotient+1,f,c
  3818  0074F6  5009               	movf	___awdiv@divisor,w,c
  3819  0074F8  5C07               	subwf	___awdiv@dividend,w,c
  3820  0074FA  500A               	movf	___awdiv@divisor+1,w,c
  3821  0074FC  5808               	subwfb	___awdiv@dividend+1,w,c
  3822  0074FE  A0D8               	btfss	status,0,c
  3823  007500  D005               	goto	l470
  3824  007502  5009               	movf	___awdiv@divisor,w,c
  3825  007504  5E07               	subwf	___awdiv@dividend,f,c
  3826  007506  500A               	movf	___awdiv@divisor+1,w,c
  3827  007508  5A08               	subwfb	___awdiv@dividend+1,f,c
  3828  00750A  800D               	bsf	___awdiv@quotient,0,c
  3829  00750C                     l470:
  3830  00750C  90D8               	bcf	status,0,c
  3831  00750E  320A               	rrcf	___awdiv@divisor+1,f,c
  3832  007510  3209               	rrcf	___awdiv@divisor,f,c
  3833  007512  2E0B               	decfsz	___awdiv@counter,f,c
  3834  007514  D7ED               	goto	u1610
  3835  007516                     l471:
  3836  007516  500C               	movf	___awdiv@sign,w,c
  3837  007518  B4D8               	btfsc	status,2,c
  3838  00751A  D004               	goto	l472
  3839  00751C  6C0D               	negf	___awdiv@quotient,c
  3840  00751E  1E0E               	comf	___awdiv@quotient+1,f,c
  3841  007520  B0D8               	btfsc	status,0,c
  3842  007522  2A0E               	incf	___awdiv@quotient+1,f,c
  3843  007524                     l472:
  3844  007524  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3845  007528  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3846  00752C  0012               	return	
  3847  00752E                     __end_of___awdiv:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           postinc0	equ	0xFEE
  3856                           wreg	equ	0xFE8
  3857                           postdec1	equ	0xFE5
  3858                           fsr1l	equ	0xFE1
  3859                           indf2	equ	0xFDF
  3860                           postinc2	equ	0xFDE
  3861                           postdec2	equ	0xFDD
  3862                           fsr2h	equ	0xFDA
  3863                           fsr2l	equ	0xFD9
  3864                           status	equ	0xFD8
  3865                           
  3866 ;; *************** function _anyGestureAvailable *****************
  3867 ;; Defined at:
  3868 ;;		line 81 in file "ZXgesture-library.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;  gesture         2    0[COMRAM] PTR unsigned char 
  3871 ;;		 -> test_all_msg@gesture(1), main@gesture(1), 
  3872 ;;  data1           2    2[COMRAM] PTR int 
  3873 ;;		 -> test_all_msg@data_1(2), main@data_1(2), 
  3874 ;;  data2           2    4[COMRAM] PTR int 
  3875 ;;		 -> test_all_msg@data_2(2), main@data_2(2), 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;		None
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  2    0[COMRAM] int 
  3880 ;; Registers used:
  3881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3887 ;;      Params:         6       0       0       0       0       0       0       0       0
  3888 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3889 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3890 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3891 ;;Total ram usage:       12 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    1
  3894 ;; This function calls:
  3895 ;;		_UART_Data_Ready
  3896 ;;		_UART_Read
  3897 ;; This function is called by:
  3898 ;;		_main
  3899 ;;		_test_all_msg
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           	psect	text26
  3904  007BA6                     __ptext26:
  3905                           	opt stack 0
  3906  007BA6                     _anyGestureAvailable:
  3907                           	opt stack 29
  3908                           
  3909                           ;ZXgesture-library.c: 82: if(UART_Data_Ready())
  3910                           
  3911                           ;incstack = 0
  3912  007BA6  EC72  F038         	call	_UART_Data_Ready	;wreg free
  3913  007BAA  0900               	iorlw	0
  3914  007BAC  B4D8               	btfsc	status,2,c
  3915  007BAE  D0EB               	goto	l265
  3916                           
  3917                           ;ZXgesture-library.c: 83: {
  3918                           ;ZXgesture-library.c: 84: msg = UART_Read();
  3919  007BB0  EC76  F038         	call	_UART_Read	;wreg free
  3920  007BB4  6E5A               	movwf	_msg,c
  3921                           
  3922                           ;ZXgesture-library.c: 85: switch(msg){
  3923  007BB6  D0D7               	goto	l250
  3924  007BB8                     
  3925                           ;ZXgesture-library.c: 87: *gesture = msg;
  3926  007BB8  C001  FFD9         	movff	anyGestureAvailable@gesture,fsr2l
  3927  007BBC  C002  FFDA         	movff	anyGestureAvailable@gesture+1,fsr2h
  3928  007BC0  C05A  FFDF         	movff	_msg,indf2
  3929                           
  3930                           ;ZXgesture-library.c: 88: *data1 = UART_Read();
  3931  007BC4  EC76  F038         	call	_UART_Read	;wreg free
  3932  007BC8  6E07               	movwf	??_anyGestureAvailable& (0+255),c
  3933  007BCA  6A08               	clrf	(??_anyGestureAvailable+1)& (0+255),c
  3934  007BCC  C003  FFD9         	movff	anyGestureAvailable@data1,fsr2l
  3935  007BD0  C004  FFDA         	movff	anyGestureAvailable@data1+1,fsr2h
  3936  007BD4  C007  FFDE         	movff	??_anyGestureAvailable,postinc2
  3937  007BD8  C008  FFDD         	movff	??_anyGestureAvailable+1,postdec2
  3938                           
  3939                           ;ZXgesture-library.c: 89: *data2 = UART_Read();
  3940  007BDC  EC76  F038         	call	_UART_Read	;wreg free
  3941  007BE0  6E07               	movwf	??_anyGestureAvailable& (0+255),c
  3942  007BE2  6A08               	clrf	(??_anyGestureAvailable+1)& (0+255),c
  3943  007BE4  C005  FFD9         	movff	anyGestureAvailable@data2,fsr2l
  3944  007BE8  C006  FFDA         	movff	anyGestureAvailable@data2+1,fsr2h
  3945  007BEC  C007  FFDE         	movff	??_anyGestureAvailable,postinc2
  3946  007BF0  C008  FFDD         	movff	??_anyGestureAvailable+1,postdec2
  3947                           
  3948                           ;ZXgesture-library.c: 90: return 1;
  3949  007BF4  0E00               	movlw	0
  3950  007BF6  6E02               	movwf	?_anyGestureAvailable+1,c
  3951  007BF8  0E01               	movlw	1
  3952  007BFA  6E01               	movwf	?_anyGestureAvailable,c
  3953  007BFC  0012               	return	
  3954  007BFE                     
  3955                           ;ZXgesture-library.c: 93: *gesture = 0xFE;
  3956  007BFE  C001  FFD9         	movff	anyGestureAvailable@gesture,fsr2l
  3957  007C02  C002  FFDA         	movff	anyGestureAvailable@gesture+1,fsr2h
  3958  007C06  0EFE               	movlw	254
  3959  007C08  6EDF               	movwf	indf2,c
  3960                           
  3961                           ;ZXgesture-library.c: 94: *data1 = UART_Read();
  3962  007C0A  EC76  F038         	call	_UART_Read	;wreg free
  3963  007C0E  6E07               	movwf	??_anyGestureAvailable& (0+255),c
  3964  007C10  6A08               	clrf	(??_anyGestureAvailable+1)& (0+255),c
  3965  007C12  C003  FFD9         	movff	anyGestureAvailable@data1,fsr2l
  3966  007C16  C004  FFDA         	movff	anyGestureAvailable@data1+1,fsr2h
  3967  007C1A  C007  FFDE         	movff	??_anyGestureAvailable,postinc2
  3968  007C1E  C008  FFDD         	movff	??_anyGestureAvailable+1,postdec2
  3969                           
  3970                           ;ZXgesture-library.c: 95: *data2 = UART_Read();
  3971  007C22  EC76  F038         	call	_UART_Read	;wreg free
  3972  007C26  6E07               	movwf	??_anyGestureAvailable& (0+255),c
  3973  007C28  6A08               	clrf	(??_anyGestureAvailable+1)& (0+255),c
  3974  007C2A  C005  FFD9         	movff	anyGestureAvailable@data2,fsr2l
  3975  007C2E  C006  FFDA         	movff	anyGestureAvailable@data2+1,fsr2h
  3976  007C32  C007  FFDE         	movff	??_anyGestureAvailable,postinc2
  3977  007C36  C008  FFDD         	movff	??_anyGestureAvailable+1,postdec2
  3978                           
  3979                           ;ZXgesture-library.c: 96: return 1;
  3980  007C3A  0E00               	movlw	0
  3981  007C3C  6E02               	movwf	?_anyGestureAvailable+1,c
  3982  007C3E  0E01               	movlw	1
  3983  007C40  6E01               	movwf	?_anyGestureAvailable,c
  3984  007C42  0012               	return	
  3985  007C44                     
  3986                           ;ZXgesture-library.c: 99: *gesture = 0xFF;
  3987  007C44  C001  FFD9         	movff	anyGestureAvailable@gesture,fsr2l
  3988  007C48  C002  FFDA         	movff	anyGestureAvailable@gesture+1,fsr2h
  3989  007C4C  0EFF               	movlw	255
  3990  007C4E  6EDF               	movwf	indf2,c
  3991                           
  3992                           ;ZXgesture-library.c: 100: *data1 = 0xFF;
  3993  007C50  C003  FFD9         	movff	anyGestureAvailable@data1,fsr2l
  3994  007C54  C004  FFDA         	movff	anyGestureAvailable@data1+1,fsr2h
  3995  007C58  0EFF               	movlw	255
  3996  007C5A  6EDE               	movwf	postinc2,c
  3997  007C5C  0E00               	movlw	0
  3998  007C5E  6EDD               	movwf	postdec2,c
  3999                           
  4000                           ;ZXgesture-library.c: 101: *data2 = 0xFF;
  4001  007C60  C005  FFD9         	movff	anyGestureAvailable@data2,fsr2l
  4002  007C64  C006  FFDA         	movff	anyGestureAvailable@data2+1,fsr2h
  4003  007C68  0EFF               	movlw	255
  4004  007C6A  6EDE               	movwf	postinc2,c
  4005  007C6C  0E00               	movlw	0
  4006  007C6E  6EDD               	movwf	postdec2,c
  4007                           
  4008                           ;ZXgesture-library.c: 102: return 1;
  4009  007C70  0E00               	movlw	0
  4010  007C72  6E02               	movwf	?_anyGestureAvailable+1,c
  4011  007C74  0E01               	movlw	1
  4012  007C76  6E01               	movwf	?_anyGestureAvailable,c
  4013  007C78  0012               	return	
  4014  007C7A                     
  4015                           ;ZXgesture-library.c: 105: *gesture = 0xFA;
  4016  007C7A  C001  FFD9         	movff	anyGestureAvailable@gesture,fsr2l
  4017  007C7E  C002  FFDA         	movff	anyGestureAvailable@gesture+1,fsr2h
  4018  007C82  0EFA               	movlw	250
  4019  007C84  6EDF               	movwf	indf2,c
  4020                           
  4021                           ;ZXgesture-library.c: 106: *data1 = UART_Read();
  4022  007C86  EC76  F038         	call	_UART_Read	;wreg free
  4023  007C8A  6E07               	movwf	??_anyGestureAvailable& (0+255),c
  4024  007C8C  6A08               	clrf	(??_anyGestureAvailable+1)& (0+255),c
  4025  007C8E  C003  FFD9         	movff	anyGestureAvailable@data1,fsr2l
  4026  007C92  C004  FFDA         	movff	anyGestureAvailable@data1+1,fsr2h
  4027  007C96  C007  FFDE         	movff	??_anyGestureAvailable,postinc2
  4028  007C9A  C008  FFDD         	movff	??_anyGestureAvailable+1,postdec2
  4029                           
  4030                           ;ZXgesture-library.c: 107: *data2 = 0xFF;
  4031  007C9E  C005  FFD9         	movff	anyGestureAvailable@data2,fsr2l
  4032  007CA2  C006  FFDA         	movff	anyGestureAvailable@data2+1,fsr2h
  4033  007CA6  0EFF               	movlw	255
  4034  007CA8  6EDE               	movwf	postinc2,c
  4035  007CAA  0E00               	movlw	0
  4036  007CAC  6EDD               	movwf	postdec2,c
  4037                           
  4038                           ;ZXgesture-library.c: 110: _last_x = *data1 > 240 ? 0xFF : *data1;
  4039  007CAE  C003  FFD9         	movff	anyGestureAvailable@data1,fsr2l
  4040  007CB2  C004  FFDA         	movff	anyGestureAvailable@data1+1,fsr2h
  4041  007CB6  0E01               	movlw	1
  4042  007CB8  BEDB               	btfsc	plusw2,7,c
  4043  007CBA  D007               	goto	u1770
  4044  007CBC  0E01               	movlw	1
  4045  007CBE  50DB               	movf	plusw2,w,c
  4046  007CC0  E10D               	bnz	l2079
  4047  007CC2  0EF1               	movlw	241
  4048  007CC4  5CDE               	subwf	postinc2,w,c
  4049  007CC6  B0D8               	btfsc	status,0,c
  4050  007CC8  D009               	goto	l257
  4051  007CCA                     u1770:
  4052  007CCA  C003  FFD9         	movff	anyGestureAvailable@data1,fsr2l
  4053  007CCE  C004  FFDA         	movff	anyGestureAvailable@data1+1,fsr2h
  4054  007CD2  CFDE F009          	movff	postinc2,_anyGestureAvailable$295
  4055  007CD6  CFDD F00A          	movff	postdec2,_anyGestureAvailable$295+1
  4056  007CDA  D003               	goto	l259
  4057  007CDC                     l257:
  4058  007CDC                     l2079:
  4059  007CDC  0E00               	movlw	0
  4060  007CDE  6E0A               	movwf	_anyGestureAvailable$295+1,c
  4061  007CE0  6809               	setf	_anyGestureAvailable$295,c
  4062  007CE2                     l259:
  4063  007CE2  C009  F055         	movff	_anyGestureAvailable$295,__last_x
  4064                           
  4065                           ;ZXgesture-library.c: 112: return 1;
  4066  007CE6  0E00               	movlw	0
  4067  007CE8  6E02               	movwf	?_anyGestureAvailable+1,c
  4068  007CEA  0E01               	movlw	1
  4069  007CEC  6E01               	movwf	?_anyGestureAvailable,c
  4070  007CEE  0012               	return	
  4071  007CF0                     
  4072                           ;ZXgesture-library.c: 115: *gesture = 0xFB;
  4073  007CF0  C001  FFD9         	movff	anyGestureAvailable@gesture,fsr2l
  4074  007CF4  C002  FFDA         	movff	anyGestureAvailable@gesture+1,fsr2h
  4075  007CF8  0EFB               	movlw	251
  4076  007CFA  6EDF               	movwf	indf2,c
  4077                           
  4078                           ;ZXgesture-library.c: 116: *data1 = UART_Read();
  4079  007CFC  EC76  F038         	call	_UART_Read	;wreg free
  4080  007D00  6E07               	movwf	??_anyGestureAvailable& (0+255),c
  4081  007D02  6A08               	clrf	(??_anyGestureAvailable+1)& (0+255),c
  4082  007D04  C003  FFD9         	movff	anyGestureAvailable@data1,fsr2l
  4083  007D08  C004  FFDA         	movff	anyGestureAvailable@data1+1,fsr2h
  4084  007D0C  C007  FFDE         	movff	??_anyGestureAvailable,postinc2
  4085  007D10  C008  FFDD         	movff	??_anyGestureAvailable+1,postdec2
  4086                           
  4087                           ;ZXgesture-library.c: 117: *data2 = 0xFF;
  4088  007D14  C005  FFD9         	movff	anyGestureAvailable@data2,fsr2l
  4089  007D18  C006  FFDA         	movff	anyGestureAvailable@data2+1,fsr2h
  4090  007D1C  0EFF               	movlw	255
  4091  007D1E  6EDE               	movwf	postinc2,c
  4092  007D20  0E00               	movlw	0
  4093  007D22  6EDD               	movwf	postdec2,c
  4094                           
  4095                           ;ZXgesture-library.c: 120: _last_z = *data1 > 240 ? 0xFF : *data1;
  4096  007D24  C003  FFD9         	movff	anyGestureAvailable@data1,fsr2l
  4097  007D28  C004  FFDA         	movff	anyGestureAvailable@data1+1,fsr2h
  4098  007D2C  0E01               	movlw	1
  4099  007D2E  BEDB               	btfsc	plusw2,7,c
  4100  007D30  D007               	goto	u1780
  4101  007D32  0E01               	movlw	1
  4102  007D34  50DB               	movf	plusw2,w,c
  4103  007D36  E10D               	bnz	l2095
  4104  007D38  0EF1               	movlw	241
  4105  007D3A  5CDE               	subwf	postinc2,w,c
  4106  007D3C  B0D8               	btfsc	status,0,c
  4107  007D3E  D009               	goto	l262
  4108  007D40                     u1780:
  4109  007D40  C003  FFD9         	movff	anyGestureAvailable@data1,fsr2l
  4110  007D44  C004  FFDA         	movff	anyGestureAvailable@data1+1,fsr2h
  4111  007D48  CFDE F00B          	movff	postinc2,_anyGestureAvailable$296
  4112  007D4C  CFDD F00C          	movff	postdec2,_anyGestureAvailable$296+1
  4113  007D50  D003               	goto	l264
  4114  007D52                     l262:
  4115  007D52                     l2095:
  4116  007D52  0E00               	movlw	0
  4117  007D54  6E0C               	movwf	_anyGestureAvailable$296+1,c
  4118  007D56  680B               	setf	_anyGestureAvailable$296,c
  4119  007D58                     l264:
  4120  007D58  C00B  F054         	movff	_anyGestureAvailable$296,__last_z
  4121                           
  4122                           ;ZXgesture-library.c: 122: return 1;
  4123  007D5C  0E00               	movlw	0
  4124  007D5E  6E02               	movwf	?_anyGestureAvailable+1,c
  4125  007D60  0E01               	movlw	1
  4126  007D62  6E01               	movwf	?_anyGestureAvailable,c
  4127  007D64  0012               	return	
  4128  007D66                     l250:
  4129  007D66  505A               	movf	_msg,w,c
  4130                           
  4131                           ; Switch size 1, requested type "space"
  4132                           ; Number of cases is 5, Range of values is 250 to 255
  4133                           ; switch strategies available:
  4134                           ; Name         Instructions Cycles
  4135                           ; simple_byte           16     9 (average)
  4136                           ;	Chosen strategy is simple_byte
  4137  007D68  0AFA               	xorlw	250	; case 250
  4138  007D6A  B4D8               	btfsc	status,2,c
  4139  007D6C  D786               	goto	l255
  4140  007D6E  0A01               	xorlw	1	; case 251
  4141  007D70  B4D8               	btfsc	status,2,c
  4142  007D72  D7BE               	goto	l260
  4143  007D74  0A07               	xorlw	7	; case 252
  4144  007D76  B4D8               	btfsc	status,2,c
  4145  007D78  D71F               	goto	l251
  4146  007D7A  0A02               	xorlw	2	; case 254
  4147  007D7C  B4D8               	btfsc	status,2,c
  4148  007D7E  D73F               	goto	l253
  4149  007D80  0A01               	xorlw	1	; case 255
  4150  007D82  B4D8               	btfsc	status,2,c
  4151  007D84  D75F               	goto	l254
  4152  007D86                     l265:
  4153                           
  4154                           ;ZXgesture-library.c: 124: }
  4155                           ;ZXgesture-library.c: 125: return 0;
  4156  007D86  0E00               	movlw	0
  4157  007D88  6E02               	movwf	?_anyGestureAvailable+1,c
  4158  007D8A  0E00               	movlw	0
  4159  007D8C  6E01               	movwf	?_anyGestureAvailable,c
  4160  007D8E  0012               	return	
  4161  007D90                     __end_of_anyGestureAvailable:
  4162                           	opt stack 0
  4163                           tblptru	equ	0xFF8
  4164                           tblptrh	equ	0xFF7
  4165                           tblptrl	equ	0xFF6
  4166                           tablat	equ	0xFF5
  4167                           prodh	equ	0xFF4
  4168                           prodl	equ	0xFF3
  4169                           postinc0	equ	0xFEE
  4170                           wreg	equ	0xFE8
  4171                           postdec1	equ	0xFE5
  4172                           fsr1l	equ	0xFE1
  4173                           indf2	equ	0xFDF
  4174                           postinc2	equ	0xFDE
  4175                           postdec2	equ	0xFDD
  4176                           plusw2	equ	0xFDB
  4177                           fsr2h	equ	0xFDA
  4178                           fsr2l	equ	0xFD9
  4179                           status	equ	0xFD8
  4180                           
  4181 ;; *************** function _UART_Read *****************
  4182 ;; Defined at:
  4183 ;;		line 57 in file "ZXgesture-library.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;		None
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      unsigned char 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4197 ;;      Params:         0       0       0       0       0       0       0       0       0
  4198 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4200 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4201 ;;Total ram usage:        0 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_anyGestureAvailable
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text27
  4211  0070EC                     __ptext27:
  4212                           	opt stack 0
  4213  0070EC                     _UART_Read:
  4214                           	opt stack 29
  4215                           
  4216                           ;ZXgesture-library.c: 59: while(!RCIF);
  4217                           
  4218                           ;incstack = 0
  4219  0070EC  AA9E               	btfss	3998,5,c	;volatile
  4220  0070EE  D7FE               	goto	_UART_Read
  4221                           
  4222                           ;ZXgesture-library.c: 60: return RCREG;
  4223  0070F0  50AE               	movf	4014,w,c	;volatile
  4224  0070F2  0012               	return	
  4225  0070F4                     __end_of_UART_Read:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodh	equ	0xFF4
  4232                           prodl	equ	0xFF3
  4233                           postinc0	equ	0xFEE
  4234                           wreg	equ	0xFE8
  4235                           postdec1	equ	0xFE5
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           plusw2	equ	0xFDB
  4241                           fsr2h	equ	0xFDA
  4242                           fsr2l	equ	0xFD9
  4243                           status	equ	0xFD8
  4244                           
  4245 ;; *************** function _UART_Data_Ready *****************
  4246 ;; Defined at:
  4247 ;;		line 53 in file "ZXgesture-library.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;		None
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      unsigned char 
  4254 ;; Registers used:
  4255 ;;		wreg
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4261 ;;      Params:         0       0       0       0       0       0       0       0       0
  4262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4264 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4265 ;;Total ram usage:        0 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_anyGestureAvailable
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text28
  4275  0070E4                     __ptext28:
  4276                           	opt stack 0
  4277  0070E4                     _UART_Data_Ready:
  4278                           	opt stack 29
  4279                           
  4280                           ;ZXgesture-library.c: 55: return RCIF;
  4281                           
  4282                           ;incstack = 0
  4283  0070E4  0E00               	movlw	0
  4284  0070E6  BA9E               	btfsc	3998,5,c	;volatile
  4285  0070E8  0E01               	movlw	1
  4286  0070EA  0012               	return	
  4287  0070EC                     __end_of_UART_Data_Ready:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           prodh	equ	0xFF4
  4294                           prodl	equ	0xFF3
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           postdec1	equ	0xFE5
  4298                           fsr1l	equ	0xFE1
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           plusw2	equ	0xFDB
  4303                           fsr2h	equ	0xFDA
  4304                           fsr2l	equ	0xFD9
  4305                           status	equ	0xFD8
  4306                           
  4307 ;; *************** function _abs *****************
  4308 ;; Defined at:
  4309 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;  a               2    0[COMRAM] int 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  2    0[COMRAM] int 
  4316 ;; Registers used:
  4317 ;;		wreg, status,2, status,0
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4323 ;;      Params:         2       0       0       0       0       0       0       0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4325 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4326 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4327 ;;Total ram usage:        4 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; This function calls:
  4330 ;;		Nothing
  4331 ;; This function is called by:
  4332 ;;		_main
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text29
  4337  0071C6                     __ptext29:
  4338                           	opt stack 0
  4339  0071C6                     _abs:
  4340                           	opt stack 30
  4341                           
  4342                           ;incstack = 0
  4343  0071C6  AE02               	btfss	abs@a+1,7,c
  4344  0071C8  D00D               	goto	l341
  4345  0071CA  C001  F003         	movff	abs@a,??_abs
  4346  0071CE  C002  F004         	movff	abs@a+1,??_abs+1
  4347  0071D2  1E03               	comf	??_abs,f,c
  4348  0071D4  1E04               	comf	??_abs+1,f,c
  4349  0071D6  4A03               	infsnz	??_abs,f,c
  4350  0071D8  2A04               	incf	??_abs+1,f,c
  4351  0071DA  C003  F001         	movff	??_abs,?_abs
  4352  0071DE  C004  F002         	movff	??_abs+1,?_abs+1
  4353  0071E2  0012               	return	
  4354  0071E4                     l341:
  4355  0071E4  C001  F001         	movff	abs@a,?_abs
  4356  0071E8  C002  F002         	movff	abs@a+1,?_abs+1
  4357  0071EC  0012               	return		;funcret
  4358  0071EE                     __end_of_abs:
  4359                           	opt stack 0
  4360                           tblptru	equ	0xFF8
  4361                           tblptrh	equ	0xFF7
  4362                           tblptrl	equ	0xFF6
  4363                           tablat	equ	0xFF5
  4364                           prodh	equ	0xFF4
  4365                           prodl	equ	0xFF3
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           postdec1	equ	0xFE5
  4369                           fsr1l	equ	0xFE1
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           plusw2	equ	0xFDB
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _UART_Write *****************
  4379 ;; Defined at:
  4380 ;;		line 63 in file "ZXgesture-library.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  data            1    wreg     unsigned char 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  data            1    0[COMRAM] unsigned char 
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		wreg
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4394 ;;      Params:         0       0       0       0       0       0       0       0       0
  4395 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4397 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4398 ;;Total ram usage:        1 bytes
  4399 ;; Hardware stack levels used:    1
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_main
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text30
  4408  007116                     __ptext30:
  4409                           	opt stack 0
  4410  007116                     _UART_Write:
  4411                           	opt stack 30
  4412                           
  4413                           ;incstack = 0
  4414                           ;UART_Write@data stored from wreg
  4415  007116  6E01               	movwf	UART_Write@data,c
  4416  007118                     
  4417                           ;ZXgesture-library.c: 65: while(!TRMT);
  4418  007118  A2AC               	btfss	4012,1,c	;volatile
  4419  00711A  D7FE               	goto	l2117
  4420                           
  4421                           ;ZXgesture-library.c: 66: TXREG = data;
  4422  00711C  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  4423  007120  0012               	return		;funcret
  4424  007122                     __end_of_UART_Write:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           prodh	equ	0xFF4
  4431                           prodl	equ	0xFF3
  4432                           postinc0	equ	0xFEE
  4433                           wreg	equ	0xFE8
  4434                           postdec1	equ	0xFE5
  4435                           fsr1l	equ	0xFE1
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           plusw2	equ	0xFDB
  4440                           fsr2h	equ	0xFDA
  4441                           fsr2l	equ	0xFD9
  4442                           status	equ	0xFD8
  4443                           
  4444 ;; *************** function _AFSmartBoard_Init *****************
  4445 ;; Defined at:
  4446 ;;		line 157 in file "main.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;		None
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;		None
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  1    wreg      void 
  4453 ;; Registers used:
  4454 ;;		wreg, status,2
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4460 ;;      Params:         0       0       0       0       0       0       0       0       0
  4461 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4462 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4463 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4464 ;;Total ram usage:        0 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_main
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text31
  4474  0071EE                     __ptext31:
  4475                           	opt stack 0
  4476  0071EE                     _AFSmartBoard_Init:
  4477                           	opt stack 30
  4478                           
  4479                           ;main.c: 158: RCON = 0X80;
  4480                           
  4481                           ;incstack = 0
  4482  0071EE  0E80               	movlw	128
  4483  0071F0  6ED0               	movwf	4048,c	;volatile
  4484                           
  4485                           ;main.c: 159: ADCON1 = 0x0F;
  4486  0071F2  0E0F               	movlw	15
  4487  0071F4  6EC1               	movwf	4033,c	;volatile
  4488                           
  4489                           ;main.c: 160: CMCON = 0x0F;
  4490  0071F6  0E0F               	movlw	15
  4491  0071F8  6EB4               	movwf	4020,c	;volatile
  4492                           
  4493                           ;main.c: 161: LATA = 0;
  4494  0071FA  0E00               	movlw	0
  4495  0071FC  6E89               	movwf	3977,c	;volatile
  4496                           
  4497                           ;main.c: 162: TRISA = 0;
  4498  0071FE  0E00               	movlw	0
  4499  007200  6E92               	movwf	3986,c	;volatile
  4500                           
  4501                           ;main.c: 163: T0CON = 0b11000101;
  4502  007202  0EC5               	movlw	197
  4503  007204  6ED5               	movwf	4053,c	;volatile
  4504                           
  4505                           ;main.c: 164: LATB = 0;
  4506  007206  0E00               	movlw	0
  4507  007208  6E8A               	movwf	3978,c	;volatile
  4508                           
  4509                           ;main.c: 165: TRISB = 0;
  4510  00720A  0E00               	movlw	0
  4511  00720C  6E93               	movwf	3987,c	;volatile
  4512                           
  4513                           ;main.c: 166: LATD = 0;
  4514  00720E  0E00               	movlw	0
  4515  007210  6E8C               	movwf	3980,c	;volatile
  4516                           
  4517                           ;main.c: 167: TRISD = 0x00;
  4518  007212  0E00               	movlw	0
  4519  007214  6E95               	movwf	3989,c	;volatile
  4520                           
  4521                           ;main.c: 168: LATE = 0;
  4522  007216  0E00               	movlw	0
  4523  007218  6E8D               	movwf	3981,c	;volatile
  4524  00721A  0012               	return		;funcret
  4525  00721C                     __end_of_AFSmartBoard_Init:
  4526                           	opt stack 0
  4527  0000                     tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           postinc0	equ	0xFEE
  4534                           wreg	equ	0xFE8
  4535                           postdec1	equ	0xFE5
  4536                           fsr1l	equ	0xFE1
  4537                           indf2	equ	0xFDF
  4538                           postinc2	equ	0xFDE
  4539                           postdec2	equ	0xFDD
  4540                           plusw2	equ	0xFDB
  4541                           fsr2h	equ	0xFDA
  4542                           fsr2l	equ	0xFD9
  4543                           status	equ	0xFD8
  4544                           tblptru	equ	0xFF8
  4545                           tblptrh	equ	0xFF7
  4546                           tblptrl	equ	0xFF6
  4547                           tablat	equ	0xFF5
  4548                           prodh	equ	0xFF4
  4549                           prodl	equ	0xFF3
  4550                           postinc0	equ	0xFEE
  4551                           wreg	equ	0xFE8
  4552                           postdec1	equ	0xFE5
  4553                           fsr1l	equ	0xFE1
  4554                           indf2	equ	0xFDF
  4555                           postinc2	equ	0xFDE
  4556                           postdec2	equ	0xFDD
  4557                           plusw2	equ	0xFDB
  4558                           fsr2h	equ	0xFDA
  4559                           fsr2l	equ	0xFD9
  4560                           status	equ	0xFD8
  4561                           
  4562                           	psect	rparam
  4563  0000                     tblptru	equ	0xFF8
  4564                           tblptrh	equ	0xFF7
  4565                           tblptrl	equ	0xFF6
  4566                           tablat	equ	0xFF5
  4567                           prodh	equ	0xFF4
  4568                           prodl	equ	0xFF3
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           postdec1	equ	0xFE5
  4572                           fsr1l	equ	0xFE1
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           plusw2	equ	0xFDB
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     75      92
    BANK0           160     22      22
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> ceil@expon(COMRAM[2]), 

    anyGestureAvailable@data2	PTR int  size(2) Largest target is 2
		 -> test_all_msg@data_2(COMRAM[2]), main@data_2(BANK0[2]), 

    anyGestureAvailable@data1	PTR int  size(2) Largest target is 2
		 -> test_all_msg@data_1(COMRAM[2]), main@data_1(BANK0[2]), 

    anyGestureAvailable@gesture	PTR unsigned char  size(2) Largest target is 1
		 -> test_all_msg@gesture(COMRAM[1]), main@gesture(BANK0[1]), 


Critical Paths under _main in COMRAM

    _main->_decreasePWM
    _main->_increasePWM
    _prevPage->_led_control
    _nextPage->_led_control
    _ledON->_led_control
    _ledOFF->_led_control
    _init_ledRGB->_led_control
    _increasePWM->___ftneg
    _decreasePWM->___ftneg
    _ceil->___altoft
    ___fttol->___ftadd
    ___ftadd->___awtoft
    ___altoft->___fttol
    ___ftneg->_ceil
    ___awtoft->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   35984
                                             73 COMRAM     2     2      0
                                              0 BANK0     22    22      0
                  _AFSmartBoard_Init
                         _UART_Write
                                _abs
                _anyGestureAvailable
                        _decreasePWM
                           _getLastX
                           _getLastZ
                        _increasePWM
                    _init_XZ_Gesture
                        _init_ledRGB
                           _ledBlink
                             _ledOFF
                              _ledON
                           _nextPage
                           _prevPage
 ---------------------------------------------------------------------------------
 (1) _prevPage                                             0     0      0      22
                        _led_control
 ---------------------------------------------------------------------------------
 (1) _nextPage                                             0     0      0      22
                        _led_control
 ---------------------------------------------------------------------------------
 (1) _ledBlink                                             4     4      0     136
                                              1 COMRAM     4     4      0
                             _ledOFF
                              _ledON
 ---------------------------------------------------------------------------------
 (1) _ledON                                                0     0      0      22
                        _led_control
 ---------------------------------------------------------------------------------
 (1) _ledOFF                                               0     0      0      22
                        _led_control
 ---------------------------------------------------------------------------------
 (1) _init_ledRGB                                          0     0      0      22
                        _led_control
                        _pwm_config_
 ---------------------------------------------------------------------------------
 (2) _pwm_config_                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _led_control                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_XZ_Gesture                                      0     0      0       0
                          _UART_Init
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _increasePWM                                          7     7      0   16780
                                             66 COMRAM     7     7      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftneg
                            ___fttol
                             ___wmul
                               _ceil
 ---------------------------------------------------------------------------------
 (1) _getLastZ                                             2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _getLastX                                             2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _decreasePWM                                          7     7      0   16780
                                             66 COMRAM     7     7      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftneg
                            ___fttol
                             ___wmul
                               _ceil
 ---------------------------------------------------------------------------------
 (2) _ceil                                                 8     5      3    8299
                                             55 COMRAM     8     5      3
                           ___altoft
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd
                             ___ftge
                            ___fttol
                             ___wmul (ARG)
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     360
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     480
                                             30 COMRAM    15    11      4
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3975
                                             18 COMRAM    12     6      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___altoft                                            10     6      4    2641
                                             45 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     197
                                             63 COMRAM     3     0      3
                            ___awdiv (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
                               _ceil (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2670
                                             14 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              6 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _anyGestureAvailable                                 12     6      6    1150
                                              0 COMRAM    12     6      6
                    _UART_Data_Ready
                          _UART_Read
 ---------------------------------------------------------------------------------
 (2) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _abs                                                  4     2      2     218
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _AFSmartBoard_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AFSmartBoard_Init
   _UART_Write
   _abs
   _anyGestureAvailable
     _UART_Data_Ready
     _UART_Read
   _decreasePWM
     ___awdiv
       ___wmul (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftadd
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftneg
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
       _ceil (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     ___wmul
     _ceil
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftge (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
       _frexp (ARG)
   _getLastX
   _getLastZ
   _increasePWM
     ___awdiv
       ___wmul (ARG)
     ___awtoft
       ___awdiv (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftadd
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___ftneg
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
       _ceil (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftadd (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftge (ARG)
         ___fttol (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     ___wmul
     _ceil
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftadd (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftadd (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
       ___ftge (ARG)
       ___fttol (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___ftadd (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
       _frexp (ARG)
   _init_XZ_Gesture
     _UART_Init
   _init_ledRGB
     _led_control
     _pwm_config_
   _ledBlink
     _ledOFF
       _led_control
     _ledON
       _led_control
   _ledOFF
     _led_control
   _ledON
     _led_control
   _nextPage
     _led_control
   _prevPage
     _led_control

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     16      16       5       13.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4B      5C       1       96.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      72      20        0.0%
DATA                 0      0      72       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 10 12:27:16 2018

                ___altoft@exp 0036                 ___altoft@sign 0037                            l30 7436  
                          l32 743E                            l33 7446                            l34 744E  
                          l50 72E0                            l35 7456                            l36 745E  
                          l52 72E8                            l29 7476                            l37 7466  
                          l38 746E                            l71 7330                            l81 7800  
                          l57 72A6                            l83 7808                            l59 72AE  
                          l92 772A                            l77 7752                            l69 7318  
                          l94 7732                            l88 7688                  ?_led_control 0001  
                ___awdiv@sign 000C           ___wmul@multiplicand 0003                  ___ftadd@exp1 001E  
                ___ftadd@exp2 001D                  ___ftadd@sign 001C                           l152 7DEA  
                         l153 7ECC                           l250 7D66                           l162 7EA0  
                         l251 7BB8                           l171 7E6A                           l163 7E4A  
                         l260 7CF0                           l500 7958                           l180 7F78  
                         l156 7E82                           l341 71E4                           l253 7BFE  
                         l501 7972                           l165 7E74                           l157 7E22  
                         l262 7D52                           l254 7C44                           l502 79EC  
                         l182 7FB8                           l174 7EEE                           l255 7C7A  
                         l159 7E40                           l264 7D58                           l520 75E6  
                         l265 7D86                           l257 7CDC                           l521 75DC  
                         l185 7FDA                           l169 7E62                           l259 7CE2  
                         l523 761A                           l179 7F68                           l524 7604  
                         l380 7370                           l381 7364                           l470 750C  
                         l526 7642                           l471 7516                           l463 74BE  
                         l527 7638                           l551 73D6                           l472 7524  
                         l464 74CE                           l608 755E                           l609 758E  
                         l466 74EC                           l626 7192                           l467 74E4  
                         l491 7266                           l571 7A76                           l644 78D4  
                         l636 783A                           l581 7AD2                           l645 78C8  
                         l590 7B10                           l582 7AC8                           l638 78B0  
                         l591 7B06                           l567 7A4C                           l647 78F0  
                         l639 78A0                           l576 7ADC                           l593 7B34  
                         l594 7B50                           l498 794A                           l595 7B80  
                         _PR2 000FCB                  __CFG_BOR$OFF 000000                           _abs 71C6  
                         _msg 005A                           wreg 000FE8                  __CFG_FOSC$HS 000000  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          ?_abs 0001  
                        l2021 7688                          l2013 7800                          l2117 7118  
                        l2095 7D52                          l2079 7CDC                          l1615 75BA  
                        l1981 7308                          l1965 72E0                          l1987 7320  
                        _BRGH 007D62                          _CREN 007D5C                          u1100 75CE  
                        u1201 7A1E                   main@gesture 0071                          u1140 764C  
                        u1230 7A3E                          u1330 7AE4                          u1410 73FE  
                        u1260 7A68                          _LATA 000F89                          u1510 78DA  
                        _LATB 000F8A                          u1191 7A0A                          u1360 7B18  
                        _LATD 000F8C                          _LATE 000F8D                          u1610 74F0  
                        u1290 7AA6                          u1418 7400                          u1451 781E  
                        u1700 7336                          u1470 7858                          u1550 7964  
                        u1710 733C                          u1720 7746                          u1730 77F6  
                        u1475 7850                          u1740 767C                          u1660 72D2  
                        u1900 7EDC                   main@count_z 0068                          u1670 7298  
                        u1840 7E2C                          u1770 7CCA                          u1930 7F62  
                        u1850 7E38                          u1780 7D40                          u1860 7E3A  
                        u1960 7FAC                          u1880 7E5C                          u1970 7FAE  
                        _RCIF 007CF5                          _RCON 000FD0                          _TMR2 000FCC  
                        _SPEN 007D5F                          _TRMT 007D61                          _TXEN 007D65  
                        _SYNC 007D64                          abs@a 0001                          _ceil 7902  
                        _main 7D90                  ___ftpack@arg 0001                   main@valid_z 0062  
                ___ftpack@exp 0004                          fsr2h 000FDA                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          prodh 000FF4  
                        prodl 000FF3                          start 0000                  ?_increasePWM 0001  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000       __end_of_init_XZ_Gesture 70E4  
                ___fttol@exp1 002D                         ??_abs 0003                  ___fttol@lval 0029  
               __CFG_PLLDIV$1 000000                         ?_ceil 0038                         ?_main 0001  
             __end_of___awdiv 752E               __end_of___ftadd 7BA6                         _BRG16 007DC3  
                       _CMCON 000FB4               __end_of___ftneg 71A0                  ?_init_ledRGB 0001  
                       _T0CON 000FD5               ___awdiv@divisor 0009               __end_of___fttol 7902  
                       _T2CON 000FCA               ___awdiv@counter 000B                         _RCREG 000FAE  
                       _SPBRG 000FAF                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISD 000F95                         _TXREG 000FAD                 __CFG_PWRT$OFF 000000  
                 ?_UART_Write 0001            __size_of_UART_Init 0016            __size_of_UART_Read 0008  
               ___awtoft@sign 0012                         _ledON 7132                         ceil@i 003B  
                       ceil@x 0038                         _frexp 73BA                         _errno 0056  
               ___ftpack@sign 0005                         main@x 0060                         main@z 006B  
        __size_of_decreasePWM 00CC                         tablat 000FF5                         plusw2 000FDB  
                       status 000FD8               __initialization 721C                  __end_of_ceil 79FA  
                __end_of_main 8000                        ??_ceil 003B                        ??_main 004A  
               ___fttol@sign1 0028                 __activetblptr 000002                 main@isLightON 006A  
                      ?_ledON 0001                        _ADCON1 000FC1                        ?_frexp 0001  
            __end_of___altoft 73BA                        _CCPR1L 000FBE              ___awdiv@dividend 0007  
            __end_of___awtoft 728A              __end_of___ftpack 766C               _decreasePWM$189 0046  
             _decreasePWM$916 0043                        _TRISC2 007CA2                        _TRISC6 007CA6  
                      _TRISC7 007CA7              __end_of_getLastX 70FC              __end_of_getLastZ 7104  
            __end_of_ledBlink 7342             __end_of_UART_Init 715C             __end_of_UART_Read 70F4  
                      ___ftge 752E           __size_of_UART_Write 000C                        ___wmul 71A0  
                   ??___awdiv 000B                     ??___ftadd 0019              ?_init_XZ_Gesture 0001  
                   ??___ftneg 0043                        _ledOFF 7104                     ??___fttol 0023  
                      clear_0 7242              ___awdiv@quotient 000D              __end_of_nextPage 72FC  
        __size_of_led_control 0078                  __pdataCOMRAM 004C              __end_of_prevPage 72C2  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                  __accesstop 0060       __end_of__initialization 7248                    ___altoft@c 002E  
             __CFG_PBADEN$OFF 000000                    ___ftadd@f1 0013                    ___ftadd@f2 0016  
                  ___ftge@ff1 0001                    ___ftge@ff2 0004                 ___rparam_used 000001  
                  ___ftneg@f1 0040                    ___awtoft@c 000F             _AFSmartBoard_Init 71EE  
                ?_pwm_config_ 0001                    ___fttol@f1 001F                __pcstackCOMRAM 0001  
 __end_of_anyGestureAvailable 7D90            ?_AFSmartBoard_Init 0001          __size_of_increasePWM 00D6  
               __end_of_ledON 7146                 __end_of_frexp 7432           ??_AFSmartBoard_Init 0001  
        __size_of_init_ledRGB 0010                increasePWM@val 0048                       ??_ledON 0002  
                     ??_frexp 0006     __end_of_AFSmartBoard_Init 721C      __size_of_UART_Data_Ready 0008  
                     ?___ftge 0001                       ?___wmul 0001                       ?_ledOFF 0001  
                     _CCP1CON 000FBD                     ?___altoft 002E                     ?___awtoft 000F  
                   ?___ftpack 0001    anyGestureAvailable@gesture 0001                    __pwm_count 005B  
                ??_UART_Write 0001                     ?_getLastX 0001                     ?_getLastZ 0001  
                   ?_ledBlink 0001                     ?_nextPage 0001                       __Hparam 0000  
                     __Lparam 0000                     ?_prevPage 0001               __size_of___ftge 0090  
                     ___awdiv 74AA                       ___ftadd 79FA                       ___ftneg 717C  
             __size_of___wmul 0026            __end_of_UART_Write 7122                       ___fttol 780E  
             __size_of_ledOFF 0008                    ??___altoft 0032                       __last_x 0055  
                     __last_z 0054                       __pcinit 721C                    ??___awtoft 0012  
                  ??___ftpack 0006                       __ramtop 0800                       __ptext0 7D90  
                     __ptext1 728A                       __ptext2 72C2                       __ptext3 72FC  
                     __ptext4 7132                       __ptext5 7104                       __ptext6 7122  
                     __ptext7 715C                       __ptext8 7432                       __ptext9 70DE  
                   _T2CONbits 000FCA                  __size_of_abs 0028                 ??_decreasePWM 0043  
                  ??_getLastX 0003                    ??_getLastZ 0003                    ??_ledBlink 0002  
        end_of_initialization 7248                 __Lmediumconst 0000    __size_of_AFSmartBoard_Init 002E  
                  ??_nextPage 0002                    ??_prevPage 0002                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
        __size_of_pwm_config_ 0020             ??_UART_Data_Ready 0001                     _UART_Init 7146  
                   _UART_Read 70EC                UART_Write@data 0001                     _TRISCbits 000F94  
                _color_pages_ 004C                    main@data_1 0074                    main@data_2 006F  
         __end_of_decreasePWM 7738                    main@rate_z 0064                 ??_led_control 0001  
              __end_of___ftge 75BE                __end_of___wmul 71C6                __end_of_ledOFF 710C  
                  ?_UART_Init 0001                    ?_UART_Read 0001                 __pidataCOMRAM 710C  
    __size_of_init_XZ_Gesture 0006           start_initialization 721C                   __end_of_abs 71EE  
                  frexp@value 0001                  _index_color_ 0058                 ??_increasePWM 0043  
                    ??___ftge 0007                      ??___wmul 0005                      ??_ledOFF 0002  
         main@substate_toggle 006D                 ??_init_ledRGB 0002             __size_of___altoft 0078  
__size_of_anyGestureAvailable 01EA             __size_of___awtoft 0038             __size_of___ftpack 00AE  
         __end_of_led_control 74AA                   __pbssCOMRAM 0056                 __pcstackBANK0 0060  
                 _decreasePWM 766C             __size_of_getLastX 0008             __size_of_getLastZ 0008  
           __size_of_ledBlink 0046             __size_of_nextPage 003A                      ?___awdiv 0007  
                    ?___ftadd 0013                      ?___ftneg 0040                      ?___fttol 001F  
           __size_of_prevPage 0038           __end_of_increasePWM 780E                   ??_UART_Init 0001  
                 ??_UART_Read 0001       _anyGestureAvailable$295 0009       _anyGestureAvailable$296 000B  
                   ceil@expon 003E           __end_of_init_ledRGB 7132                __size_of_ledON 0014  
              __size_of_frexp 0078             ??_init_XZ_Gesture 0001                ___wmul@product 0005  
                    _LATAbits 000F89               _UART_Data_Ready 70E4               main@count_tchau 0072  
              decreasePWM@val 0048                     ledBlink@c 0002                     ledBlink@d 0004  
                 _led_control 7432               _increasePWM$186 0046               _increasePWM$915 0043  
           ___wmul@multiplier 0001             led_control@ledCor 0001                     copy_data0 7230  
                   frexp@eptr 0004                      __Hrparam 0000                   _increasePWM 7738  
               ??_pwm_config_ 0001                      __Lrparam 0000              __size_of___awdiv 0084  
            __size_of___ftadd 01AC              __size_of___ftneg 0024                      ___altoft 7342  
            __size_of___fttol 00F4                      ___awtoft 7252                      ___ftpack 75BE  
                 _init_ledRGB 7122                      _main$259 0066                      _getLastX 70F4  
                    _getLastZ 70FC                      _ledBlink 72FC                      __ptext10 7146  
                    __ptext11 7738                      __ptext20 7342                      __ptext12 70FC  
                    __ptext21 71A0                      __ptext13 70F4                      __ptext30 7116  
                    __ptext22 717C                      __ptext14 766C                      __ptext31 71EE  
                    __ptext23 7252                      __ptext15 7902                      __ptext24 75BE  
                    __ptext16 73BA                      __ptext25 74AA                      __ptext17 780E  
                    __ptext26 7BA6                      __ptext18 752E                      __ptext27 70EC  
                    __ptext19 79FA                      __ptext28 70E4                      __ptext29 71C6  
     __end_of_UART_Data_Ready 70EC                 __size_of_ceil 00F8                 __size_of_main 0270  
         _anyGestureAvailable 7BA6                      _nextPage 72C2                      _prevPage 728A  
         __end_of_pwm_config_ 717C         __CFG_CPUDIV$OSC1_PLL2 000000          ?_anyGestureAvailable 0001  
    anyGestureAvailable@data1 0003      anyGestureAvailable@data2 0005                  ?_decreasePWM 0001  
       ??_anyGestureAvailable 0007               _init_XZ_Gesture 70DE                    _UART_Write 7116  
            ?_UART_Data_Ready 0001                   _pwm_config_ 715C  
